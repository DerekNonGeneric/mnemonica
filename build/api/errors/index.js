'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructError = exports.BASE_MNEMONICA_ERROR = exports.getStack = exports.cleanupStack = exports.stackCleaners = void 0;
const constants_1 = require("../../constants");
const { odp, SymbolConstructorName, MNEMONICA, ErrorMessages, } = constants_1.constants;
const { BASE_ERROR_MESSAGE } = ErrorMessages;
exports.stackCleaners = [];
const cleanupStack = (stack) => {
    const cleaned = stack.reduce((arr, line) => {
        exports.stackCleaners.forEach(cleanerRegExp => {
            if (!cleanerRegExp.test(line)) {
                arr.push(line);
            }
        });
        return arr;
    }, []);
    return cleaned.length ? cleaned : stack;
};
exports.cleanupStack = cleanupStack;
const getStack = function (title, stackAddition, tillFunction) {
    if (Error.captureStackTrace) {
        Error.captureStackTrace(this, tillFunction || exports.getStack);
    }
    else {
        this.stack = (new Error()).stack;
    }
    this.stack = this.stack.split('\n').slice(1);
    this.stack = (0, exports.cleanupStack)(this.stack);
    this.stack.unshift(title);
    if (Array.isArray(stackAddition) && stackAddition.length) {
        this.stack.push(...stackAddition);
    }
    this.stack.push('\n');
    return this.stack;
};
exports.getStack = getStack;
class BASE_MNEMONICA_ERROR extends Error {
    constructor(message = BASE_ERROR_MESSAGE, additionalStack) {
        super(message);
        const BaseStack = this.stack;
        odp(this, 'BaseStack', {
            get() {
                return BaseStack;
            }
        });
        const stack = (0, exports.cleanupStack)(BaseStack.split('\n'));
        if (additionalStack) {
            stack.unshift(...additionalStack);
        }
        this.stack = stack.join('\n');
    }
    static get [SymbolConstructorName]() {
        return new String(`base of : ${MNEMONICA} : errors`);
    }
}
exports.BASE_MNEMONICA_ERROR = BASE_MNEMONICA_ERROR;
Object.defineProperty(BASE_MNEMONICA_ERROR.prototype.constructor, 'name', {
    get() {
        return new String('BASE_MNEMONICA_ERROR');
    }
});
const constructError = (name, message) => {
    const NamedErrorConstructor = class extends BASE_MNEMONICA_ERROR {
        constructor(addition, stack) {
            const saying = addition ? `${message} : ${addition}` : `${message}`;
            super(saying, stack);
        }
    };
    const reNamer = {};
    reNamer[name] = NamedErrorConstructor;
    Object.defineProperty(reNamer[name].prototype.constructor, 'name', {
        get() {
            return new String(name);
        }
    });
    return reNamer[name];
};
exports.constructError = constructError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL2Vycm9ycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7OztBQUViLCtDQUE0QztBQUU1QyxNQUFNLEVBQ0wsR0FBRyxFQUNILHFCQUFxQixFQUNyQixTQUFTLEVBQ1QsYUFBYSxHQUNiLEdBQUcscUJBQVMsQ0FBQztBQUVkLE1BQU0sRUFDTCxrQkFBa0IsRUFDbEIsR0FBRyxhQUFhLENBQUM7QUFFTCxRQUFBLGFBQWEsR0FBYSxFQUFFLENBQUM7QUFFbkMsTUFBTSxZQUFZLEdBQUcsQ0FBRSxLQUFlLEVBQUcsRUFBRTtJQUNqRCxNQUFNLE9BQU8sR0FBYSxLQUFLLENBQUMsTUFBTSxDQUFFLENBQUUsR0FBYSxFQUFFLElBQVksRUFBRyxFQUFFO1FBQ3pFLHFCQUFhLENBQUMsT0FBTyxDQUFFLGFBQWEsQ0FBQyxFQUFFO1lBQ3RDLElBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxFQUFHLENBQUM7Z0JBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUM7WUFDbEIsQ0FBQztRQUNGLENBQUMsQ0FBRSxDQUFDO1FBQ0osT0FBTyxHQUFHLENBQUM7SUFDWixDQUFDLEVBQUUsRUFBRSxDQUFFLENBQUM7SUFDUixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3pDLENBQUMsQ0FBQztBQVZXLFFBQUEsWUFBWSxnQkFVdkI7QUFFSyxNQUFNLFFBQVEsR0FBRyxVQUFzQixLQUFhLEVBQUUsYUFBdUIsRUFBRSxZQUErQjtJQUVwSCxJQUFLLEtBQUssQ0FBQyxpQkFBaUIsRUFBRyxDQUFDO1FBQy9CLEtBQUssQ0FBQyxpQkFBaUIsQ0FBRSxJQUFJLEVBQUUsWUFBWSxJQUFJLGdCQUFRLENBQUUsQ0FBQztJQUMzRCxDQUFD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QU8sQ0FBRSxJQUFJLENBQUUsQ0FBQztBQUN4QixDQUFDLENBQUM7QUF0QlcsUUFBQSxjQUFjLGtCQXNCekIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IHtcblx0b2RwLFxuXHRTeW1ib2xDb25zdHJ1Y3Rvck5hbWUsXG5cdE1ORU1PTklDQSxcblx0RXJyb3JNZXNzYWdlcyxcbn0gPSBjb25zdGFudHM7XG5cbmNvbnN0IHtcblx0QkFTRV9FUlJPUl9NRVNTQUdFXG59ID0gRXJyb3JNZXNzYWdlcztcblxuZXhwb3J0IGNvbnN0IHN0YWNrQ2xlYW5lcnM6IFJlZ0V4cFtdID0gW107XG5cbmV4cG9ydCBjb25zdCBjbGVhbnVwU3RhY2sgPSAoIHN0YWNrOiBzdHJpbmdbXSApID0+IHtcblx0Y29uc3QgY2xlYW5lZDogc3RyaW5nW10gPSBzdGFjay5yZWR1Y2UoICggYXJyOiBzdHJpbmdbXSwgbGluZTogc3RyaW5nICkgPT4ge1xuXHRcdHN0YWNrQ2xlYW5lcnMuZm9yRWFjaCggY2xlYW5lclJlZ0V4cCA9PiB7XG5cdFx0XHRpZiAoICFjbGVhbmVyUmVnRXhwLnRlc3QoIGxpbmUgKSApIHtcblx0XHRcdFx0YXJyLnB1c2goIGxpbmUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIGFycjtcblx0fSwgW10gKTtcblx0cmV0dXJuIGNsZWFuZWQubGVuZ3RoID8gY2xlYW5lZCA6IHN0YWNrO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFN0YWNrID0gZnVuY3Rpb24gKCB0aGlzOiBhbnksIHRpdGxlOiBzdHJpbmcsIHN0YWNrQWRkaXRpb246IHN0cmluZ1tdLCB0aWxsRnVuY3Rpb24/OiBDYWxsYWJsZUZ1bmN0aW9uICkge1xuXG5cdGlmICggRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgKSB7XG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoIHRoaXMsIHRpbGxGdW5jdGlvbiB8fCBnZXRTdGFjayApO1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMuc3RhY2sgPSAoIG5ldyBFcnJvcigpICkuc3RhY2s7XG5cdH1cblxuXHR0aGlzLnN0YWNrID0gdGhpcy5zdGFjay5zcGxpdCggJ1xcbicgKS5zbGljZSggMSApO1xuXHR0aGlzLnN0YWNrID0gY2xlYW51cFN0YWNrKCB0aGlzLnN0YWNrICk7XG5cblx0dGhpcy5zdGFjay51bnNoaWZ0KCB0aXRsZSApO1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHN0YWNrQWRkaXRpb24gKSAmJiBzdGFja0FkZGl0aW9uLmxlbmd0aCApIHtcblx0XHR0aGlzLnN0YWNrLnB1c2goIC4uLnN0YWNrQWRkaXRpb24gKTtcblx0fVxuXHR0aGlzLnN0YWNrLnB1c2goICdcXG4nICk7XG5cblx0cmV0dXJuIHRoaXMuc3RhY2s7XG5cbn07XG5cbmV4cG9ydCBjbGFzcyBCQVNFX01ORU1PTklDQV9FUlJPUiBleHRlbmRzIEVycm9yIHtcblxuXHRjb25zdHJ1Y3RvciAoIG1lc3NhZ2UgPSBCQVNFX0VSUk9SX01FU1NBR0UsIGFkZGl0aW9uYWxTdGFjazogc3RyaW5nW10gKSB7XG5cblx0XHRzdXBlciggbWVzc2FnZSApO1xuXHRcdGNvbnN0IEJhc2VTdGFjazogYW55ID0gdGhpcy5zdGFjaztcblx0XHRvZHAoIHRoaXMsICdCYXNlU3RhY2snLCB7XG5cdFx0XHRnZXQgKCkge1xuXHRcdFx0XHRyZXR1cm4gQmFzZVN0YWNrO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGNvbnN0IHN0YWNrID0gY2xlYW51cFN0YWNrKCBCYXNlU3RhY2suc3BsaXQoICdcXG4nICkgKTtcblxuXHRcdGlmICggYWRkaXRpb25hbFN0YWNrICkge1xuXHRcdFx0c3RhY2sudW5zaGlmdCggLi4uYWRkaXRpb25hbFN0YWNrICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdGFjayA9IHN0YWNrLmpvaW4oICdcXG4nICk7XG5cblx0fVxuXG5cdHN0YXRpYyBnZXQgWyBTeW1ib2xDb25zdHJ1Y3Rvck5hbWUgXSAoKSB7XG5cdFx0cmV0dXJuIG5ldyBTdHJpbmcoIGBiYXNlIG9mIDogJHtNTkVNT05JQ0F9IDogZXJyb3JzYCApO1xuXHR9XG5cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBCQVNFX01ORU1PTklDQV9FUlJPUi5wcm90b3R5cGUuY29uc3RydWN0b3IsICduYW1lJywge1xuXHRnZXQgKCkge1xuXHRcdHJldHVybiBuZXcgU3RyaW5nKCAnQkFTRV9NTkVNT05JQ0FfRVJST1InICk7XG5cdH1cbn0gKTtcblxuXG5leHBvcnQgY29uc3QgY29uc3RydWN0RXJyb3IgPSAoIG5hbWU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nICkgPT4ge1xuXHRjb25zdCBOYW1lZEVycm9yQ29uc3RydWN0b3IgPSBjbGFzcyBleHRlbmRzIEJBU0VfTU5FTU9OSUNBX0VSUk9SIHtcblx0XHRjb25zdHJ1Y3RvciAoIGFkZGl0aW9uOiBzdHJpbmcsIHN0YWNrOiBzdHJpbmdbXSApIHtcblx0XHRcdGNvbnN0IHNheWluZyA9IGFkZGl0aW9uID8gYCR7bWVzc2FnZX0gOiAke2FkZGl0aW9ufWAgOiBgJHttZXNzYWdlfWA7XG5cdFx0XHRzdXBlciggc2F5aW5nLCBzdGFjayApO1xuXHRcdH1cblx0fTtcblxuXHRjb25zdCByZU5hbWVyID0ge30gYXMge1xuXHRcdFsga2V5OiBzdHJpbmcgXToge1xuXHRcdFx0cHJvdG90eXBlOiB7XG5cdFx0XHRcdGNvbnN0cnVjdG9yOiBDYWxsYWJsZUZ1bmN0aW9uXG5cdFx0XHR9XG5cdFx0fSxcblx0fTtcblx0cmVOYW1lclsgbmFtZSBdID0gTmFtZWRFcnJvckNvbnN0cnVjdG9yO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHJlTmFtZXJbIG5hbWUgXS5wcm90b3R5cGUuY29uc3RydWN0b3IsICduYW1lJywge1xuXHRcdGdldCAoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFN0cmluZyggbmFtZSApO1xuXHRcdH1cblx0fSApO1xuXHRyZXR1cm4gcmVOYW1lclsgbmFtZSBdO1xufTtcbiJdfQ==