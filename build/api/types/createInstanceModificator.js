'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
function default_1(obey) {
    const CreateInstanceModificator = function (ModificatorType, ModificatorTypePrototype, addProps) {
        const existentInstance = this;
        const Mnemosyne = {};
        Reflect.setPrototypeOf(Mnemosyne, existentInstance);
        addProps(Mnemosyne);
        Object.defineProperty(Mnemosyne, 'constructor', {
            get() {
                return ModificatorType;
            },
            enumerable: false
        });
        Object.entries(ModificatorTypePrototype).forEach((entry) => {
            const [name, value] = entry;
            if (name !== 'constructor') {
                (ModificatorType.prototype[name] = value);
            }
        });
        Object.defineProperty(ModificatorType.prototype, 'constructor', {
            value: ModificatorType
        });
        Reflect.setPrototypeOf(ModificatorType.prototype, Mnemosyne);
        obey(existentInstance, ModificatorType);
        return ModificatorType;
    };
    return CreateInstanceModificator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdHlwZXMvY3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsNEJBbUVDO0FBbkVELG1CQUF5QixJQUFzQjtJQUU5QyxNQUFNLHlCQUF5QixHQUFHLFVBRWpDLGVBQWlDLEVBQ2pDLHdCQUFzRCxFQUN0RCxRQUEwQjtRQUkxQixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUs5QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDckIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNwRCxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFJcEIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsYUFBYSxFQUFFO1lBQy9DLEdBQUc7Z0JBQ0YsT0FBTyxlQUFlLENBQUM7WUFDeEIsQ0FBQztZQUNELFVBQVUsRUFBRyxLQUFLO1NBQ2xCLENBQUMsQ0FBQztRQUlILE1BQU0sQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMxRCxNQUFNLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxHQUFHLEtBQUssQ0FBQztZQUM5QixJQUNDLElBQUksS0FBSyxhQUFhLEVBR3JCLENBQUM7Z0JBQ0YsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzdDLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztRQUtILE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUU7WUFDL0QsS0FBSyxFQUFHLGVBQWU7U0FJdkIsQ0FBQyxDQUFDO1FBR0gsT0FBTyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRzdELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUV4QyxPQUFPLGVBQWUsQ0FBQztJQU14QixDQUFDLENBQUM7SUFFRixPQUFPLHlCQUF5QixDQUFDO0FBRWxDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvYmV5OiBDYWxsYWJsZUZ1bmN0aW9uKSB7XG5cblx0Y29uc3QgQ3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvciA9IGZ1bmN0aW9uIChcblx0XHR0aGlzOiBvYmplY3QsXG5cdFx0TW9kaWZpY2F0b3JUeXBlOiBDYWxsYWJsZUZ1bmN0aW9uLFxuXHRcdE1vZGlmaWNhdG9yVHlwZVByb3RvdHlwZTogeyBbaW5kZXg6IHN0cmluZ106IHVua25vd24gfSxcblx0XHRhZGRQcm9wczogQ2FsbGFibGVGdW5jdGlvblxuXHQpIHtcblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuXHRcdGNvbnN0IGV4aXN0ZW50SW5zdGFuY2UgPSB0aGlzO1xuXG5cdFx0Ly8gY29uc3QgVHJpcGxlU2NoZW1lQ2xvc3VyZSA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBjb25zdCBNbmVtb3N5bmUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgTW5lbW9zeW5lID0ge307XG5cdFx0UmVmbGVjdC5zZXRQcm90b3R5cGVPZihNbmVtb3N5bmUsIGV4aXN0ZW50SW5zdGFuY2UpO1xuXHRcdGFkZFByb3BzKE1uZW1vc3luZSk7XG5cblx0XHQvLyBhYm91dCB0byBzZXR1cCBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBmb3IgbmV3IGluc3RhbmNlXG5cdFx0Ly8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGluaGVyaXRlZCwgJ2NvbnN0cnVjdG9yJywge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNbmVtb3N5bmUsICdjb25zdHJ1Y3RvcicsIHtcblx0XHRcdGdldCAoKSB7XG5cdFx0XHRcdHJldHVybiBNb2RpZmljYXRvclR5cGU7XG5cdFx0XHR9LFxuXHRcdFx0ZW51bWVyYWJsZSA6IGZhbHNlXG5cdFx0fSk7XG5cblx0XHQvLyBtb2RpZmljYXRpb24gaXRzZWxmXG5cdFx0Ly8gc28gbm93IHdlIGhhdmUgdG8gY29weSBhbGwgY29uc3RydWN0b3IgcHJvcHNcblx0XHRPYmplY3QuZW50cmllcyhNb2RpZmljYXRvclR5cGVQcm90b3R5cGUpLmZvckVhY2goKGVudHJ5KSA9PiB7XG5cdFx0XHRjb25zdCBbIG5hbWUsIHZhbHVlIF0gPSBlbnRyeTtcblx0XHRcdGlmIChcblx0XHRcdFx0bmFtZSAhPT0gJ2NvbnN0cnVjdG9yJ1xuXHRcdFx0XHQvLyAmJlxuXHRcdFx0XHQvLyBuYW1lICE9PSBTeW1ib2xDb25zdHJ1Y3Rvck5hbWVcblx0XHRcdCkge1xuXHRcdFx0XHQoTW9kaWZpY2F0b3JUeXBlLnByb3RvdHlwZVsgbmFtZSBdID0gdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8vIDEuIG5leHQgbGluZSBpcyBkb25lIDQgb3VyIGNvbnNvbGUubG9nIHdpbGwgcHJpbnQgcHJvcGVyIHR5cGVcblx0XHQvLyBhbmQgaXQgc2hvdWxkIGJlIGV4cGxpY2l0IGRlY2xhcmF0aW9uLCBvciBpdCB3b3VsZG4ndCBzZWVcblx0XHQvLyBNb2RpZmljYXRvclR5cGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW9kaWZpY2F0b3JUeXBlO1xuXHRcdC8vIHRoZXJmb3JlIHRoZSBmb2xsb3dpbmcgbGluZXMgYXJlIGNvbW1lbnRlZFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2RpZmljYXRvclR5cGUucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCB7XG5cdFx0XHR2YWx1ZSA6IE1vZGlmaWNhdG9yVHlwZVxuXHRcdFx0Ly8gZ2V0ICgpIHtcblx0XHRcdC8vIFx0cmV0dXJuIE1vZGlmaWNhdG9yVHlwZTtcblx0XHRcdC8vIH1cblx0XHR9KTtcblxuXHRcdC8vIGFuZCBzZXQgdGhlIHByb3RvdHlwZSBpbmhlcml0ZWRcblx0XHRSZWZsZWN0LnNldFByb3RvdHlwZU9mKE1vZGlmaWNhdG9yVHlwZS5wcm90b3R5cGUsIE1uZW1vc3luZSk7XG5cdFx0Ly8gUmVmbGVjdC5zZXRQcm90b3R5cGVPZihNb2RpZmljYXRvclR5cGUucHJvdG90eXBlLCBpbmhlcml0ZWQpO1xuXG5cdFx0b2JleShleGlzdGVudEluc3RhbmNlLCBNb2RpZmljYXRvclR5cGUpO1xuXG5cdFx0cmV0dXJuIE1vZGlmaWNhdG9yVHlwZTtcblxuXHRcdC8vIH07XG5cdFx0Ly8gVHJpcGxlU2NoZW1lQ2xvc3VyZS5wcm90b3R5cGUgPSBleGlzdGVudEluc3RhbmNlO1xuXHRcdC8vIHJldHVybiBuZXcgVHJpcGxlU2NoZW1lQ2xvc3VyZSgpO1xuXG5cdH07XG5cblx0cmV0dXJuIENyZWF0ZUluc3RhbmNlTW9kaWZpY2F0b3I7XG5cbn1cbiJdfQ==