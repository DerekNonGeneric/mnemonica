'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
function default_1(obey) {
    const CreateInstanceModificator = function (ModificatorType, ModificatorTypePrototype, _addProps) {
        const existentInstance = this;
        const Mnemosyne = {};
        Reflect.setPrototypeOf(Mnemosyne, existentInstance);
        _addProps(Mnemosyne);
        Object.defineProperty(Mnemosyne, 'constructor', {
            get() {
                return ModificatorType;
            },
            enumerable: false
        });
        Object.entries(ModificatorTypePrototype).forEach((entry) => {
            const [name, value] = entry;
            if (name !== 'constructor') {
                (ModificatorType.prototype[name] = value);
            }
        });
        Object.defineProperty(ModificatorType.prototype, 'constructor', {
            value: ModificatorType
        });
        Reflect.setPrototypeOf(ModificatorType.prototype, Mnemosyne);
        obey(existentInstance, ModificatorType);
        return ModificatorType;
    };
    return CreateInstanceModificator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdHlwZXMvY3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsNEJBbUVDO0FBbkVELG1CQUF5QixJQUFzQjtJQUU5QyxNQUFNLHlCQUF5QixHQUFHLFVBRWpDLGVBQWlDLEVBQ2pDLHdCQUFzRCxFQUN0RCxTQUEyQjtRQUkzQixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUs5QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDckIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNwRCxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7UUFJckIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsYUFBYSxFQUFFO1lBQy9DLEdBQUc7Z0JBQ0YsT0FBTyxlQUFlLENBQUM7WUFDeEIsQ0FBQztZQUNELFVBQVUsRUFBRyxLQUFLO1NBQ2xCLENBQUMsQ0FBQztRQUlILE1BQU0sQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMxRCxNQUFNLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxHQUFHLEtBQUssQ0FBQztZQUM5QixJQUNDLElBQUksS0FBSyxhQUFhLEVBR3JCLENBQUM7Z0JBQ0YsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzdDLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztRQUtILE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUU7WUFDL0QsS0FBSyxFQUFHLGVBQWU7U0FJdkIsQ0FBQyxDQUFDO1FBR0gsT0FBTyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRzdELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUV4QyxPQUFPLGVBQWUsQ0FBQztJQU14QixDQUFDLENBQUM7SUFFRixPQUFPLHlCQUF5QixDQUFDO0FBRWxDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvYmV5OiBDYWxsYWJsZUZ1bmN0aW9uKSB7XG5cblx0Y29uc3QgQ3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvciA9IGZ1bmN0aW9uIChcblx0XHR0aGlzOiBvYmplY3QsXG5cdFx0TW9kaWZpY2F0b3JUeXBlOiBDYWxsYWJsZUZ1bmN0aW9uLFxuXHRcdE1vZGlmaWNhdG9yVHlwZVByb3RvdHlwZTogeyBbaW5kZXg6IHN0cmluZ106IHVua25vd24gfSxcblx0XHRfYWRkUHJvcHM6IENhbGxhYmxlRnVuY3Rpb25cblx0KSB7XG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcblx0XHRjb25zdCBleGlzdGVudEluc3RhbmNlID0gdGhpcztcblxuXHRcdC8vIGNvbnN0IFRyaXBsZVNjaGVtZUNsb3N1cmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gY29uc3QgTW5lbW9zeW5lID0gdGhpcztcblxuXHRcdGNvbnN0IE1uZW1vc3luZSA9IHt9O1xuXHRcdFJlZmxlY3Quc2V0UHJvdG90eXBlT2YoTW5lbW9zeW5lLCBleGlzdGVudEluc3RhbmNlKTtcblx0XHRfYWRkUHJvcHMoTW5lbW9zeW5lKTtcblxuXHRcdC8vIGFib3V0IHRvIHNldHVwIGNvbnN0cnVjdG9yIHByb3BlcnR5IGZvciBuZXcgaW5zdGFuY2Vcblx0XHQvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoaW5oZXJpdGVkLCAnY29uc3RydWN0b3InLCB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE1uZW1vc3luZSwgJ2NvbnN0cnVjdG9yJywge1xuXHRcdFx0Z2V0ICgpIHtcblx0XHRcdFx0cmV0dXJuIE1vZGlmaWNhdG9yVHlwZTtcblx0XHRcdH0sXG5cdFx0XHRlbnVtZXJhYmxlIDogZmFsc2Vcblx0XHR9KTtcblxuXHRcdC8vIG1vZGlmaWNhdGlvbiBpdHNlbGZcblx0XHQvLyBzbyBub3cgd2UgaGF2ZSB0byBjb3B5IGFsbCBjb25zdHJ1Y3RvciBwcm9wc1xuXHRcdE9iamVjdC5lbnRyaWVzKE1vZGlmaWNhdG9yVHlwZVByb3RvdHlwZSkuZm9yRWFjaCgoZW50cnkpID0+IHtcblx0XHRcdGNvbnN0IFsgbmFtZSwgdmFsdWUgXSA9IGVudHJ5O1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuYW1lICE9PSAnY29uc3RydWN0b3InXG5cdFx0XHRcdC8vICYmXG5cdFx0XHRcdC8vIG5hbWUgIT09IFN5bWJvbENvbnN0cnVjdG9yTmFtZVxuXHRcdFx0KSB7XG5cdFx0XHRcdChNb2RpZmljYXRvclR5cGUucHJvdG90eXBlWyBuYW1lIF0gPSB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gMS4gbmV4dCBsaW5lIGlzIGRvbmUgNCBvdXIgY29uc29sZS5sb2cgd2lsbCBwcmludCBwcm9wZXIgdHlwZVxuXHRcdC8vIGFuZCBpdCBzaG91bGQgYmUgZXhwbGljaXQgZGVjbGFyYXRpb24sIG9yIGl0IHdvdWxkbid0IHNlZVxuXHRcdC8vIE1vZGlmaWNhdG9yVHlwZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNb2RpZmljYXRvclR5cGU7XG5cdFx0Ly8gdGhlcmZvcmUgdGhlIGZvbGxvd2luZyBsaW5lcyBhcmUgY29tbWVudGVkXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZGlmaWNhdG9yVHlwZS5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIHtcblx0XHRcdHZhbHVlIDogTW9kaWZpY2F0b3JUeXBlXG5cdFx0XHQvLyBnZXQgKCkge1xuXHRcdFx0Ly8gXHRyZXR1cm4gTW9kaWZpY2F0b3JUeXBlO1xuXHRcdFx0Ly8gfVxuXHRcdH0pO1xuXG5cdFx0Ly8gYW5kIHNldCB0aGUgcHJvdG90eXBlIGluaGVyaXRlZFxuXHRcdFJlZmxlY3Quc2V0UHJvdG90eXBlT2YoTW9kaWZpY2F0b3JUeXBlLnByb3RvdHlwZSwgTW5lbW9zeW5lKTtcblx0XHQvLyBSZWZsZWN0LnNldFByb3RvdHlwZU9mKE1vZGlmaWNhdG9yVHlwZS5wcm90b3R5cGUsIGluaGVyaXRlZCk7XG5cblx0XHRvYmV5KGV4aXN0ZW50SW5zdGFuY2UsIE1vZGlmaWNhdG9yVHlwZSk7XG5cblx0XHRyZXR1cm4gTW9kaWZpY2F0b3JUeXBlO1xuXG5cdFx0Ly8gfTtcblx0XHQvLyBUcmlwbGVTY2hlbWVDbG9zdXJlLnByb3RvdHlwZSA9IGV4aXN0ZW50SW5zdGFuY2U7XG5cdFx0Ly8gcmV0dXJuIG5ldyBUcmlwbGVTY2hlbWVDbG9zdXJlKCk7XG5cblx0fTtcblxuXHRyZXR1cm4gQ3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvcjtcblxufVxuIl19