'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
function default_1(obey) {
    const CreateInstanceModificator = function (ModificatorType, ModificatorTypePrototype, addProps) {
        const existentInstance = this;
        const Mnemosyne = {};
        Reflect.setPrototypeOf(Mnemosyne, existentInstance);
        addProps(Mnemosyne);
        Object.defineProperty(Mnemosyne, 'constructor', {
            get() {
                return ModificatorType;
            },
            enumerable: false
        });
        Object.entries(ModificatorTypePrototype).forEach((entry) => {
            const [name, value] = entry;
            if (name !== 'constructor') {
                (ModificatorType.prototype[name] = value);
            }
        });
        ModificatorType.prototype.constructor = ModificatorType;
        Reflect.setPrototypeOf(ModificatorType.prototype, Mnemosyne);
        obey(existentInstance, ModificatorType);
        return ModificatorType;
    };
    return CreateInstanceModificator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdHlwZXMvY3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsNEJBa0VDO0FBbEVELG1CQUEwQixJQUFzQjtJQUUvQyxNQUFNLHlCQUF5QixHQUFHLFVBRWpDLGVBQWlDLEVBQ2pDLHdCQUF3RCxFQUN4RCxRQUEwQjtRQUkxQixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUs5QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDckIsT0FBTyxDQUFDLGNBQWMsQ0FBRSxTQUFTLEVBQUUsZ0JBQWdCLENBQUUsQ0FBQztRQUN0RCxRQUFRLENBQUUsU0FBUyxDQUFFLENBQUM7UUFJdEIsTUFBTSxDQUFDLGNBQWMsQ0FBRSxTQUFTLEVBQUUsYUFBYSxFQUFFO1lBQ2hELEdBQUc7Z0JBQ0YsT0FBTyxlQUFlLENBQUM7WUFDeEIsQ0FBQztZQUNELFVBQVUsRUFBRyxLQUFLO1NBQ2xCLENBQUUsQ0FBQztRQUlKLE1BQU0sQ0FBQyxPQUFPLENBQUUsd0JBQXdCLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBRSxLQUFLLEVBQUcsRUFBRTtZQUMvRCxNQUFNLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxHQUFHLEtBQUssQ0FBQztZQUM5QixJQUNDLElBQUksS0FBSyxhQUFhLEVBR3JCLENBQUM7Z0JBQ0YsQ0FBRSxlQUFlLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBRSxHQUFHLEtBQUssQ0FBRSxDQUFDO1lBQy9DLENBQUM7UUFDRixDQUFDLENBQUUsQ0FBQztRQUdKLGVBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQztRQVN4RCxPQUFPLENBQUMsY0FBYyxDQUFFLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFHL0QsSUFBSSxDQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBRSxDQUFDO1FBRTFDLE9BQU8sZUFBZSxDQUFDO0lBTXhCLENBQUMsQ0FBQztJQUVGLE9BQU8seUJBQXlCLENBQUM7QUFFbEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCBvYmV5OiBDYWxsYWJsZUZ1bmN0aW9uICkge1xuXG5cdGNvbnN0IENyZWF0ZUluc3RhbmNlTW9kaWZpY2F0b3IgPSBmdW5jdGlvbiAoXG5cdFx0dGhpczogb2JqZWN0LFxuXHRcdE1vZGlmaWNhdG9yVHlwZTogQ2FsbGFibGVGdW5jdGlvbixcblx0XHRNb2RpZmljYXRvclR5cGVQcm90b3R5cGU6IHsgWyBpbmRleDogc3RyaW5nIF06IHVua25vd24gfSxcblx0XHRhZGRQcm9wczogQ2FsbGFibGVGdW5jdGlvblxuXHQpIHtcblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuXHRcdGNvbnN0IGV4aXN0ZW50SW5zdGFuY2UgPSB0aGlzO1xuXG5cdFx0Ly8gY29uc3QgVHJpcGxlU2NoZW1lQ2xvc3VyZSA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBjb25zdCBNbmVtb3N5bmUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgTW5lbW9zeW5lID0ge307XG5cdFx0UmVmbGVjdC5zZXRQcm90b3R5cGVPZiggTW5lbW9zeW5lLCBleGlzdGVudEluc3RhbmNlICk7XG5cdFx0YWRkUHJvcHMoIE1uZW1vc3luZSApO1xuXG5cdFx0Ly8gYWJvdXQgdG8gc2V0dXAgY29uc3RydWN0b3IgcHJvcGVydHkgZm9yIG5ldyBpbnN0YW5jZVxuXHRcdC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbmhlcml0ZWQsICdjb25zdHJ1Y3RvcicsIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIE1uZW1vc3luZSwgJ2NvbnN0cnVjdG9yJywge1xuXHRcdFx0Z2V0ICgpIHtcblx0XHRcdFx0cmV0dXJuIE1vZGlmaWNhdG9yVHlwZTtcblx0XHRcdH0sXG5cdFx0XHRlbnVtZXJhYmxlIDogZmFsc2Vcblx0XHR9ICk7XG5cblx0XHQvLyBtb2RpZmljYXRpb24gaXRzZWxmXG5cdFx0Ly8gc28gbm93IHdlIGhhdmUgdG8gY29weSBhbGwgY29uc3RydWN0b3IgcHJvcHNcblx0XHRPYmplY3QuZW50cmllcyggTW9kaWZpY2F0b3JUeXBlUHJvdG90eXBlICkuZm9yRWFjaCggKCBlbnRyeSApID0+IHtcblx0XHRcdGNvbnN0IFsgbmFtZSwgdmFsdWUgXSA9IGVudHJ5O1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuYW1lICE9PSAnY29uc3RydWN0b3InXG5cdFx0XHRcdC8vICYmXG5cdFx0XHRcdC8vIG5hbWUgIT09IFN5bWJvbENvbnN0cnVjdG9yTmFtZVxuXHRcdFx0KSB7XG5cdFx0XHRcdCggTW9kaWZpY2F0b3JUeXBlLnByb3RvdHlwZVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0Ly8gMS4gbmV4dCBsaW5lIGlzIGRvbmUgNCBvdXIgY29uc29sZS5sb2cgd2lsbCBwcmludCBwcm9wZXIgdHlwZVxuXHRcdC8vIGFuZCBpdCBzaG91bGQgYmUgZXhwbGljaXQgZGVjbGFyYXRpb24sIG9yIGl0IHdvdWxkbid0IHNlZVxuXHRcdE1vZGlmaWNhdG9yVHlwZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNb2RpZmljYXRvclR5cGU7XG5cdFx0Ly8gdGhlcmZvcmUgdGhlIGZvbGxvd2luZyBsaW5lcyBhcmUgY29tbWVudGVkXG5cdFx0Ly8gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZGlmaWNhdG9yVHlwZS5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIHtcblx0XHQvLyBcdGdldCAoKSB7XG5cdFx0Ly8gXHRcdHJldHVybiBNb2RpZmljYXRvclR5cGU7XG5cdFx0Ly8gXHR9XG5cdFx0Ly8gfSk7XG5cblx0XHQvLyBhbmQgc2V0IHRoZSBwcm90b3R5cGUgaW5oZXJpdGVkXG5cdFx0UmVmbGVjdC5zZXRQcm90b3R5cGVPZiggTW9kaWZpY2F0b3JUeXBlLnByb3RvdHlwZSwgTW5lbW9zeW5lICk7XG5cdFx0Ly8gUmVmbGVjdC5zZXRQcm90b3R5cGVPZihNb2RpZmljYXRvclR5cGUucHJvdG90eXBlLCBpbmhlcml0ZWQpO1xuXG5cdFx0b2JleSggZXhpc3RlbnRJbnN0YW5jZSwgTW9kaWZpY2F0b3JUeXBlICk7XG5cblx0XHRyZXR1cm4gTW9kaWZpY2F0b3JUeXBlO1xuXG5cdFx0Ly8gfTtcblx0XHQvLyBUcmlwbGVTY2hlbWVDbG9zdXJlLnByb3RvdHlwZSA9IGV4aXN0ZW50SW5zdGFuY2U7XG5cdFx0Ly8gcmV0dXJuIG5ldyBUcmlwbGVTY2hlbWVDbG9zdXJlKCk7XG5cblx0fTtcblxuXHRyZXR1cm4gQ3JlYXRlSW5zdGFuY2VNb2RpZmljYXRvcjtcblxufVxuIl19