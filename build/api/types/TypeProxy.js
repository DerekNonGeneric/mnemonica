'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeProxy = void 0;
const utils_1 = require("../utils");
const { checkProto, } = utils_1.default;
const hop_1 = require("../../utils/hop");
const errors_1 = require("../../descriptors/errors");
const { WRONG_TYPE_DEFINITION, } = errors_1.ErrorsTypes;
const Mnemosyne_1 = require("./Mnemosyne");
const { createMnemosyne } = Mnemosyne_1.default;
const InstanceCreator_1 = require("./InstanceCreator");
exports.TypeProxy = function (__type__, Uranus) {
    Object.assign(this, {
        __type__,
        Uranus
    });
    const typeProxy = new Proxy(InstanceCreator_1.InstanceCreator, this);
    return typeProxy;
};
exports.TypeProxy.prototype.get = function (target, prop) {
    const { __type__: type } = this;
    if (prop === 'prototype') {
        return type.proto;
    }
    const propDeclaration = type[prop];
    if (propDeclaration) {
        return propDeclaration;
    }
    if ((0, hop_1.hop)(type, prop)) {
        return propDeclaration;
    }
    if (type.subtypes.has(prop)) {
        return type.subtypes.get(prop);
    }
    return Reflect.get(target, prop);
};
exports.TypeProxy.prototype.set = function (__, name, value) {
    const { __type__: type } = this;
    if (name === 'prototype') {
        checkProto(value);
        type.proto = value;
        return true;
    }
    if (typeof name !== 'string' || !name.length) {
        throw new WRONG_TYPE_DEFINITION('should use non empty string as TypeName');
    }
    if (typeof value !== 'function') {
        throw new WRONG_TYPE_DEFINITION('should use function for type definition');
    }
    const TypeName = name;
    const Constructor = value;
    type.define(TypeName, Constructor);
    return true;
};
exports.TypeProxy.prototype.apply = function (__, Uranus, args) {
    const type = this.__type__;
    let instance = null;
    if (Uranus) {
        const InstanceCreatorProxy = new exports.TypeProxy(type, Uranus);
        instance = new InstanceCreatorProxy(...args);
    }
    else {
        instance = this.construct(null, args);
    }
    return instance;
};
exports.TypeProxy.prototype.construct = function (__, args) {
    const { __type__: type, Uranus } = this;
    const mnemosyneProxy = createMnemosyne(Uranus);
    const instance = new InstanceCreator_1.InstanceCreator(type, mnemosyneProxy, args);
    return instance;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZVByb3h5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS90eXBlcy9UeXBlUHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsWUFBWSxDQUFDOzs7QUFLYixvQ0FBa0M7QUFDbEMsTUFBTSxFQUNMLFVBQVUsR0FDVixHQUFHLGVBQVUsQ0FBQztBQUVmLHlDQUFzQztBQUV0QyxxREFBdUQ7QUFDdkQsTUFBTSxFQUNMLHFCQUFxQixHQUNyQixHQUFHLG9CQUFXLENBQUM7QUFFaEIsMkNBQXFDO0FBQ3JDLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxtQkFBVSxDQUFDO0FBRXZDLHVEQUFvRDtBQUl2QyxRQUFBLFNBQVMsR0FBRyxVQUFXLFFBQWEsRUFBRSxNQUFlO0lBQ2pFLE1BQU0sQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFFO1FBQ3BCLFFBQVE7UUFDUixNQUFNO0tBQ04sQ0FBRSxDQUFDO0lBQ0osTUFBTSxTQUFTLEdBQUcsSUFBSSxLQUFLLENBQUUsaUNBQWUsRUFBRSxJQUFJLENBQUUsQ0FBQztJQUNyRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUE2QixDQUFDO0FBRTlCLGlCQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFXLE1BQVcsRUFBRSxJQUFtQjtJQUlwRSxNQUFNLEVBQ0wsUUFBUSxFQUFFLElBQUksRUFDZCxHQUFHLElBQUksQ0FBQztJQUtULElBQUssSUFBSSxLQUFLLFdBQVcsRUFBRyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDO0lBQ3JDLElBQUssZUFBZSxFQUFHLENBQUM7UUFDdkIsT0FBTyxlQUFlLENBQUM7SUFDeEIsQ0FBQztJQUlELElBQUssSUFBQSxTQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBRSxFQUFHLENBQUM7UUFDekIsT0FBTyxlQUFlLENBQUM7SUFDeEIsQ0FBQztJQUdELElBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLEVBQUcsQ0FBQztRQUNqQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUUsTUFBTSxFQUFFLElBQUksQ0FBRSxDQUFDO0FBRXBDLENBQUMsQ0FBQztBQUVGLGlCQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFXLEVBQU8sRUFBRSxJQUFZLEVBQUUsS0FBVTtJQUVyRSxNQUFNLEVBQ0wsUUFBUSxFQUFFLElBQUksRUFDZCxHQUFHLElBQUksQ0FBQztJQUdULElBQUssSUFBSSxLQUFLLFdBQVcsRUFBRyxDQUFDO1FBQzVCLFVBQVUsQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFLLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUcsQ0FBQztRQUNoRCxNQUFNLElBQUkscUJBQXFCLENBQUUseUNBQXlDLENBQUUsQ0FBQztJQUM5RSxDQUFDO0lBRUQsSUFBSyxPQUFPLEtBQUssS0FBSyxVQUFVLEVBQUcsQ0FBQztRQUNuQyxNQUFNLElBQUkscUJBQXFCLENBQUUseUNBQXlDLENBQUUsQ0FBQztJQUM5RSxDQUFDO0lBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztJQUUxQixJQUFJLENBQUMsTUFBTSxDQUFFLFFBQVEsRUFBRSxXQUFXLENBQUUsQ0FBQztJQUNyQyxPQUFPLElBQUksQ0FBQztBQUViLENBQUMsQ0FBQztBQUdGLGlCQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFXLEVBQVcsRUFBRSxNQUFlLEVBQUUsSUFBZTtJQUNuRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzNCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFLLE1BQU0sRUFBRyxDQUFDO1FBQ2QsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLGlCQUFTLENBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBRSxDQUFDO1FBQzNELFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUFFLEdBQUcsSUFBSSxDQUFFLENBQUM7SUFDaEQsQ0FBQztTQUFNLENBQUM7UUFDUCxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxJQUFJLEVBQUUsSUFBSSxDQUFFLENBQUM7SUFDekMsQ0FBQztJQUNELE9BQU8sUUFBUSxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUtGLGlCQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFXLEVBQVcsRUFBRSxJQUFlO0lBSXRFLE1BQU0sRUFDTCxRQUFRLEVBQUUsSUFBSSxFQUNkLE1BQU0sRUFDTixHQUFHLElBQUksQ0FBQztJQUVULE1BQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLGlDQUFlLENBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUUsQ0FBQztJQUNuRSxPQUFPLFFBQVEsQ0FBQztBQUVqQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IENvbnN0cnVjdG9yRnVuY3Rpb24gfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cblxuaW1wb3J0IFR5cGVzVXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuY29uc3Qge1xuXHRjaGVja1Byb3RvLFxufSA9IFR5cGVzVXRpbHM7XG5cbmltcG9ydCB7IGhvcCB9IGZyb20gJy4uLy4uL3V0aWxzL2hvcCc7XG5cbmltcG9ydCB7IEVycm9yc1R5cGVzIH0gZnJvbSAnLi4vLi4vZGVzY3JpcHRvcnMvZXJyb3JzJztcbmNvbnN0IHtcblx0V1JPTkdfVFlQRV9ERUZJTklUSU9OLFxufSA9IEVycm9yc1R5cGVzO1xuXG5pbXBvcnQgbW5lbW9zeW5lcyBmcm9tICcuL01uZW1vc3luZSc7XG5jb25zdCB7IGNyZWF0ZU1uZW1vc3luZSB9ID0gbW5lbW9zeW5lcztcblxuaW1wb3J0IHsgSW5zdGFuY2VDcmVhdG9yIH0gZnJvbSAnLi9JbnN0YW5jZUNyZWF0b3InO1xuXG5pbXBvcnQgeyAvKiBfZ2V0UHJvcHMsIFByb3BzLCAqLyBUeXBlRGVmIH0gZnJvbSAnLi9Qcm9wcyc7XG5cbmV4cG9ydCBjb25zdCBUeXBlUHJveHkgPSBmdW5jdGlvbiAoIF9fdHlwZV9fOiBhbnksIFVyYW51czogdW5rbm93biApIHtcblx0T2JqZWN0LmFzc2lnbiggdGhpcywge1xuXHRcdF9fdHlwZV9fLFxuXHRcdFVyYW51c1xuXHR9ICk7XG5cdGNvbnN0IHR5cGVQcm94eSA9IG5ldyBQcm94eSggSW5zdGFuY2VDcmVhdG9yLCB0aGlzICk7XG5cdHJldHVybiB0eXBlUHJveHk7XG59IGFzIENvbnN0cnVjdG9yRnVuY3Rpb248YW55PjtcblxuVHlwZVByb3h5LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoIHRhcmdldDogYW55LCBwcm9wOiBrZXlvZiBUeXBlRGVmICkge1xuXHRcblx0Ly8gY29uc3QgcHJvcHMgPSBfZ2V0UHJvcHModGhpcykgYXMgUHJvcHM7XG5cblx0Y29uc3Qge1xuXHRcdF9fdHlwZV9fOiB0eXBlXG5cdH0gPSB0aGlzO1xuXG5cdC8vIHByb3RvdHlwZSBvZiBwcm94eVxuXHQvLyBjb25zdCBpbnN0YW5jZSA9IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YocmVjZWl2ZXIpO1xuXG5cdGlmICggcHJvcCA9PT0gJ3Byb3RvdHlwZScgKSB7XG5cdFx0cmV0dXJuIHR5cGUucHJvdG87XG5cdH1cblxuXHRjb25zdCBwcm9wRGVjbGFyYXRpb24gPSB0eXBlWyBwcm9wIF07XG5cdGlmICggcHJvcERlY2xhcmF0aW9uICkge1xuXHRcdHJldHVybiBwcm9wRGVjbGFyYXRpb247XG5cdH1cblxuXHQvLyB1c2VkIGZvciBleGlzdGVudCBwcm9wcyB3aXRoIHZhbHVlXG5cdC8vIHVuZGVmaW5lZCB8fCBudWxsIHx8IGZhbHNlXG5cdGlmICggaG9wKCB0eXBlLCBwcm9wICkgKSB7XG5cdFx0cmV0dXJuIHByb3BEZWNsYXJhdGlvbjtcblx0fVxuXG5cdC8vIFNvbWVUeXBlLlNvbWVTdWJUeXBlXG5cdGlmICggdHlwZS5zdWJ0eXBlcy5oYXMoIHByb3AgKSApIHtcblx0XHRyZXR1cm4gdHlwZS5zdWJ0eXBlcy5nZXQoIHByb3AgKTtcblx0fVxuXG5cdHJldHVybiBSZWZsZWN0LmdldCggdGFyZ2V0LCBwcm9wICk7XG5cbn07XG5cblR5cGVQcm94eS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKCBfXzogYW55LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkgKSB7XG5cblx0Y29uc3Qge1xuXHRcdF9fdHlwZV9fOiB0eXBlXG5cdH0gPSB0aGlzO1xuXG5cdC8vIGlzIGFib3V0IHNldHRpbmcgYSBwcm90b3R5cGUgdG8gVHlwZVxuXHRpZiAoIG5hbWUgPT09ICdwcm90b3R5cGUnICkge1xuXHRcdGNoZWNrUHJvdG8oIHZhbHVlICk7XG5cdFx0dHlwZS5wcm90byA9IHZhbHVlO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCB0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgIW5hbWUubGVuZ3RoICkge1xuXHRcdHRocm93IG5ldyBXUk9OR19UWVBFX0RFRklOSVRJT04oICdzaG91bGQgdXNlIG5vbiBlbXB0eSBzdHJpbmcgYXMgVHlwZU5hbWUnICk7XG5cdH1cblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyApIHtcblx0XHR0aHJvdyBuZXcgV1JPTkdfVFlQRV9ERUZJTklUSU9OKCAnc2hvdWxkIHVzZSBmdW5jdGlvbiBmb3IgdHlwZSBkZWZpbml0aW9uJyApO1xuXHR9XG5cblx0Y29uc3QgVHlwZU5hbWUgPSBuYW1lO1xuXHRjb25zdCBDb25zdHJ1Y3RvciA9IHZhbHVlO1xuXG5cdHR5cGUuZGVmaW5lKCBUeXBlTmFtZSwgQ29uc3RydWN0b3IgKTtcblx0cmV0dXJuIHRydWU7XG5cbn07XG5cblxuVHlwZVByb3h5LnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uICggX186IHVua25vd24sIFVyYW51czogdW5rbm93biwgYXJnczogdW5rbm93bltdICkge1xuXHRjb25zdCB0eXBlID0gdGhpcy5fX3R5cGVfXztcblx0bGV0IGluc3RhbmNlID0gbnVsbDtcblx0aWYgKCBVcmFudXMgKSB7XG5cdFx0Y29uc3QgSW5zdGFuY2VDcmVhdG9yUHJveHkgPSBuZXcgVHlwZVByb3h5KCB0eXBlLCBVcmFudXMgKTtcblx0XHRpbnN0YW5jZSA9IG5ldyBJbnN0YW5jZUNyZWF0b3JQcm94eSggLi4uYXJncyApO1xuXHR9IGVsc2Uge1xuXHRcdGluc3RhbmNlID0gdGhpcy5jb25zdHJ1Y3QoIG51bGwsIGFyZ3MgKTtcblx0fVxuXHRyZXR1cm4gaW5zdGFuY2U7XG59O1xuXG5cblxuXG5UeXBlUHJveHkucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uICggX186IHVua25vd24sIGFyZ3M6IHVua25vd25bXSApIHtcblxuXHQvLyBuZXcudGFyZ2V0IGlkIGVxdWFsIHdpdGggdGFyZ2V0IGhlcmVcblx0XG5cdGNvbnN0IHtcblx0XHRfX3R5cGVfXzogdHlwZSxcblx0XHRVcmFudXNcblx0fSA9IHRoaXM7XG5cblx0Y29uc3QgbW5lbW9zeW5lUHJveHkgPSBjcmVhdGVNbmVtb3N5bmUoVXJhbnVzKTtcblxuXHRjb25zdCBpbnN0YW5jZSA9IG5ldyBJbnN0YW5jZUNyZWF0b3IoIHR5cGUsIG1uZW1vc3luZVByb3h5LCBhcmdzICk7XG5cdHJldHVybiBpbnN0YW5jZTtcblxufTtcbiJdfQ==