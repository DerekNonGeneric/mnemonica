'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeProxy = void 0;
const utils_1 = require("../utils");
const { checkProto, } = utils_1.default;
const hop_1 = require("../../utils/hop");
const errors_1 = require("../../descriptors/errors");
const { WRONG_TYPE_DEFINITION, } = errors_1.ErrorsTypes;
const Mnemosyne_1 = require("./Mnemosyne");
const { createMnemosyne } = Mnemosyne_1.default;
const InstanceCreator_1 = require("./InstanceCreator");
exports.TypeProxy = function (__type__, Uranus) {
    Object.assign(this, {
        __type__,
        Uranus
    });
    const typeProxy = new Proxy(InstanceCreator_1.InstanceCreator, this);
    return typeProxy;
};
exports.TypeProxy.prototype.get = function (target, prop) {
    const { __type__: type } = this;
    if (prop === 'prototype') {
        return type.proto;
    }
    const propDeclaration = type[prop];
    if (propDeclaration) {
        return propDeclaration;
    }
    if ((0, hop_1.hop)(type, prop)) {
        return propDeclaration;
    }
    if (type.subtypes.has(prop)) {
        return type.subtypes.get(prop);
    }
    return Reflect.get(target, prop);
};
exports.TypeProxy.prototype.set = function (__, name, value) {
    const { __type__: type } = this;
    if (name === 'prototype') {
        checkProto(value);
        Object.assign(type.proto, value);
        return true;
    }
    if (typeof name !== 'string' || !name.length) {
        throw new WRONG_TYPE_DEFINITION('should use non empty string as TypeName');
    }
    if (typeof value !== 'function') {
        throw new WRONG_TYPE_DEFINITION('should use function for type definition');
    }
    const TypeName = name;
    const Constructor = value;
    type.define(TypeName, Constructor);
    return true;
};
exports.TypeProxy.prototype.apply = function (__, Uranus, args) {
    const type = this.__type__;
    let instance = null;
    if (Uranus) {
        const InstanceCreatorProxy = new exports.TypeProxy(type, Uranus);
        instance = new InstanceCreatorProxy(...args);
    }
    else {
        instance = this.construct(null, args);
    }
    return instance;
};
exports.TypeProxy.prototype.construct = function (__, args) {
    const { __type__: type, Uranus } = this;
    const mnemosyneProxy = createMnemosyne(Uranus);
    const instance = new InstanceCreator_1.InstanceCreator(type, mnemosyneProxy, args);
    return instance;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZVByb3h5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS90eXBlcy9UeXBlUHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsWUFBWSxDQUFDOzs7QUFLYixvQ0FBa0M7QUFDbEMsTUFBTSxFQUNMLFVBQVUsR0FDVixHQUFHLGVBQVUsQ0FBQztBQUVmLHlDQUFzQztBQUV0QyxxREFBdUQ7QUFDdkQsTUFBTSxFQUNMLHFCQUFxQixHQUNyQixHQUFHLG9CQUFXLENBQUM7QUFFaEIsMkNBQXFDO0FBQ3JDLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxtQkFBVSxDQUFDO0FBRXZDLHVEQUFvRDtBQUl2QyxRQUFBLFNBQVMsR0FBRyxVQUFXLFFBQWEsRUFBRSxNQUFlO0lBQ2pFLE1BQU0sQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFFO1FBQ3BCLFFBQVE7UUFDUixNQUFNO0tBQ04sQ0FBRSxDQUFDO0lBQ0osTUFBTSxTQUFTLEdBQUcsSUFBSSxLQUFLLENBQUUsaUNBQWUsRUFBRSxJQUFJLENBQUUsQ0FBQztJQUNyRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUE2QixDQUFDO0FBRTlCLGlCQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFXLE1BQVcsRUFBRSxJQUFtQjtJQUlwRSxNQUFNLEVBQ0wsUUFBUSxFQUFFLElBQUksRUFDZCxHQUFHLElBQUksQ0FBQztJQUtULElBQUssSUFBSSxLQUFLLFdBQVcsRUFBRyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDO0lBQ3JDLElBQUssZUFBZSxFQUFHLENBQUM7UUFDdkIsT0FBTyxlQUFlLENBQUM7SUFDeEIsQ0FBQztJQUlELElBQUssSUFBQSxTQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBRSxFQUFHLENBQUM7UUFDekIsT0FBTyxlQUFlLENBQUM7SUFDeEIsQ0FBQztJQUdELElBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLEVBQUcsQ0FBQztRQUNqQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUUsTUFBTSxFQUFFLElBQUksQ0FBRSxDQUFDO0FBRXBDLENBQUMsQ0FBQztBQUVGLGlCQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFXLEVBQU8sRUFBRSxJQUFZLEVBQUUsS0FBVTtJQUVyRSxNQUFNLEVBQ0wsUUFBUSxFQUFFLElBQUksRUFDZCxHQUFHLElBQUksQ0FBQztJQUdULElBQUssSUFBSSxLQUFLLFdBQVcsRUFBRyxDQUFDO1FBQzVCLFVBQVUsQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsSUFBSyxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFHLENBQUM7UUFDaEQsTUFBTSxJQUFJLHFCQUFxQixDQUFFLHlDQUF5QyxDQUFFLENBQUM7SUFDOUUsQ0FBQztJQUVELElBQUssT0FBTyxLQUFLLEtBQUssVUFBVSxFQUFHLENBQUM7UUFDbkMsTUFBTSxJQUFJLHFCQUFxQixDQUFFLHlDQUF5QyxDQUFFLENBQUM7SUFDOUUsQ0FBQztJQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQztJQUN0QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFFMUIsSUFBSSxDQUFDLE1BQU0sQ0FBRSxRQUFRLEVBQUUsV0FBVyxDQUFFLENBQUM7SUFDckMsT0FBTyxJQUFJLENBQUM7QUFFYixDQUFDLENBQUM7QUFHRixpQkFBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVyxFQUFXLEVBQUUsTUFBZSxFQUFFLElBQWU7SUFDbkYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMzQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDcEIsSUFBSyxNQUFNLEVBQUcsQ0FBQztRQUNkLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxpQkFBUyxDQUFFLElBQUksRUFBRSxNQUFNLENBQUUsQ0FBQztRQUMzRCxRQUFRLEdBQUcsSUFBSSxvQkFBb0IsQ0FBRSxHQUFHLElBQUksQ0FBRSxDQUFDO0lBQ2hELENBQUM7U0FBTSxDQUFDO1FBQ1AsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUUsSUFBSSxFQUFFLElBQUksQ0FBRSxDQUFDO0lBQ3pDLENBQUM7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNqQixDQUFDLENBQUM7QUFLRixpQkFBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsVUFBVyxFQUFXLEVBQUUsSUFBZTtJQUl0RSxNQUFNLEVBQ0wsUUFBUSxFQUFFLElBQUksRUFDZCxNQUFNLEVBQ04sR0FBRyxJQUFJLENBQUM7SUFFVCxNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFL0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxpQ0FBZSxDQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFFLENBQUM7SUFDbkUsT0FBTyxRQUFRLENBQUM7QUFFakIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBDb25zdHJ1Y3RvckZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5cbmltcG9ydCBUeXBlc1V0aWxzIGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IHtcblx0Y2hlY2tQcm90byxcbn0gPSBUeXBlc1V0aWxzO1xuXG5pbXBvcnQgeyBob3AgfSBmcm9tICcuLi8uLi91dGlscy9ob3AnO1xuXG5pbXBvcnQgeyBFcnJvcnNUeXBlcyB9IGZyb20gJy4uLy4uL2Rlc2NyaXB0b3JzL2Vycm9ycyc7XG5jb25zdCB7XG5cdFdST05HX1RZUEVfREVGSU5JVElPTixcbn0gPSBFcnJvcnNUeXBlcztcblxuaW1wb3J0IG1uZW1vc3luZXMgZnJvbSAnLi9NbmVtb3N5bmUnO1xuY29uc3QgeyBjcmVhdGVNbmVtb3N5bmUgfSA9IG1uZW1vc3luZXM7XG5cbmltcG9ydCB7IEluc3RhbmNlQ3JlYXRvciB9IGZyb20gJy4vSW5zdGFuY2VDcmVhdG9yJztcblxuaW1wb3J0IHsgLyogX2dldFByb3BzLCBQcm9wcywgKi8gVHlwZURlZiB9IGZyb20gJy4vUHJvcHMnO1xuXG5leHBvcnQgY29uc3QgVHlwZVByb3h5ID0gZnVuY3Rpb24gKCBfX3R5cGVfXzogYW55LCBVcmFudXM6IHVua25vd24gKSB7XG5cdE9iamVjdC5hc3NpZ24oIHRoaXMsIHtcblx0XHRfX3R5cGVfXyxcblx0XHRVcmFudXNcblx0fSApO1xuXHRjb25zdCB0eXBlUHJveHkgPSBuZXcgUHJveHkoIEluc3RhbmNlQ3JlYXRvciwgdGhpcyApO1xuXHRyZXR1cm4gdHlwZVByb3h5O1xufSBhcyBDb25zdHJ1Y3RvckZ1bmN0aW9uPGFueT47XG5cblR5cGVQcm94eS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCB0YXJnZXQ6IGFueSwgcHJvcDoga2V5b2YgVHlwZURlZiApIHtcblx0XG5cdC8vIGNvbnN0IHByb3BzID0gX2dldFByb3BzKHRoaXMpIGFzIFByb3BzO1xuXG5cdGNvbnN0IHtcblx0XHRfX3R5cGVfXzogdHlwZVxuXHR9ID0gdGhpcztcblxuXHQvLyBwcm90b3R5cGUgb2YgcHJveHlcblx0Ly8gY29uc3QgaW5zdGFuY2UgPSBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHJlY2VpdmVyKTtcblxuXHRpZiAoIHByb3AgPT09ICdwcm90b3R5cGUnICkge1xuXHRcdHJldHVybiB0eXBlLnByb3RvO1xuXHR9XG5cblx0Y29uc3QgcHJvcERlY2xhcmF0aW9uID0gdHlwZVsgcHJvcCBdO1xuXHRpZiAoIHByb3BEZWNsYXJhdGlvbiApIHtcblx0XHRyZXR1cm4gcHJvcERlY2xhcmF0aW9uO1xuXHR9XG5cblx0Ly8gdXNlZCBmb3IgZXhpc3RlbnQgcHJvcHMgd2l0aCB2YWx1ZVxuXHQvLyB1bmRlZmluZWQgfHwgbnVsbCB8fCBmYWxzZVxuXHRpZiAoIGhvcCggdHlwZSwgcHJvcCApICkge1xuXHRcdHJldHVybiBwcm9wRGVjbGFyYXRpb247XG5cdH1cblxuXHQvLyBTb21lVHlwZS5Tb21lU3ViVHlwZVxuXHRpZiAoIHR5cGUuc3VidHlwZXMuaGFzKCBwcm9wICkgKSB7XG5cdFx0cmV0dXJuIHR5cGUuc3VidHlwZXMuZ2V0KCBwcm9wICk7XG5cdH1cblxuXHRyZXR1cm4gUmVmbGVjdC5nZXQoIHRhcmdldCwgcHJvcCApO1xuXG59O1xuXG5UeXBlUHJveHkucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICggX186IGFueSwgbmFtZTogc3RyaW5nLCB2YWx1ZTogYW55ICkge1xuXG5cdGNvbnN0IHtcblx0XHRfX3R5cGVfXzogdHlwZVxuXHR9ID0gdGhpcztcblxuXHQvLyBpcyBhYm91dCBzZXR0aW5nIGEgcHJvdG90eXBlIHRvIFR5cGVcblx0aWYgKCBuYW1lID09PSAncHJvdG90eXBlJyApIHtcblx0XHRjaGVja1Byb3RvKCB2YWx1ZSApO1xuXHRcdE9iamVjdC5hc3NpZ24odHlwZS5wcm90bywgdmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCB0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgIW5hbWUubGVuZ3RoICkge1xuXHRcdHRocm93IG5ldyBXUk9OR19UWVBFX0RFRklOSVRJT04oICdzaG91bGQgdXNlIG5vbiBlbXB0eSBzdHJpbmcgYXMgVHlwZU5hbWUnICk7XG5cdH1cblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyApIHtcblx0XHR0aHJvdyBuZXcgV1JPTkdfVFlQRV9ERUZJTklUSU9OKCAnc2hvdWxkIHVzZSBmdW5jdGlvbiBmb3IgdHlwZSBkZWZpbml0aW9uJyApO1xuXHR9XG5cblx0Y29uc3QgVHlwZU5hbWUgPSBuYW1lO1xuXHRjb25zdCBDb25zdHJ1Y3RvciA9IHZhbHVlO1xuXG5cdHR5cGUuZGVmaW5lKCBUeXBlTmFtZSwgQ29uc3RydWN0b3IgKTtcblx0cmV0dXJuIHRydWU7XG5cbn07XG5cblxuVHlwZVByb3h5LnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uICggX186IHVua25vd24sIFVyYW51czogdW5rbm93biwgYXJnczogdW5rbm93bltdICkge1xuXHRjb25zdCB0eXBlID0gdGhpcy5fX3R5cGVfXztcblx0bGV0IGluc3RhbmNlID0gbnVsbDtcblx0aWYgKCBVcmFudXMgKSB7XG5cdFx0Y29uc3QgSW5zdGFuY2VDcmVhdG9yUHJveHkgPSBuZXcgVHlwZVByb3h5KCB0eXBlLCBVcmFudXMgKTtcblx0XHRpbnN0YW5jZSA9IG5ldyBJbnN0YW5jZUNyZWF0b3JQcm94eSggLi4uYXJncyApO1xuXHR9IGVsc2Uge1xuXHRcdGluc3RhbmNlID0gdGhpcy5jb25zdHJ1Y3QoIG51bGwsIGFyZ3MgKTtcblx0fVxuXHRyZXR1cm4gaW5zdGFuY2U7XG59O1xuXG5cblxuXG5UeXBlUHJveHkucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uICggX186IHVua25vd24sIGFyZ3M6IHVua25vd25bXSApIHtcblxuXHQvLyBuZXcudGFyZ2V0IGlkIGVxdWFsIHdpdGggdGFyZ2V0IGhlcmVcblx0XG5cdGNvbnN0IHtcblx0XHRfX3R5cGVfXzogdHlwZSxcblx0XHRVcmFudXNcblx0fSA9IHRoaXM7XG5cblx0Y29uc3QgbW5lbW9zeW5lUHJveHkgPSBjcmVhdGVNbmVtb3N5bmUoVXJhbnVzKTtcblxuXHRjb25zdCBpbnN0YW5jZSA9IG5ldyBJbnN0YW5jZUNyZWF0b3IoIHR5cGUsIG1uZW1vc3luZVByb3h5LCBhcmdzICk7XG5cdHJldHVybiBpbnN0YW5jZTtcblxufTtcbiJdfQ==