'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeProxy = void 0;
const utils_1 = require("../utils");
const { checkProto, } = utils_1.default;
const hop_1 = require("../../utils/hop");
const errors_1 = require("../../descriptors/errors");
const { WRONG_TYPE_DEFINITION, } = errors_1.ErrorsTypes;
const Mnemosyne_1 = require("./Mnemosyne");
const { createMnemosyne } = Mnemosyne_1.default;
const InstanceCreator_1 = require("./InstanceCreator");
exports.TypeProxy = function (__type__, Uranus) {
    Object.assign(this, {
        __type__,
        Uranus
    });
    const typeProxy = new Proxy(InstanceCreator_1.InstanceCreator, this);
    return typeProxy;
};
exports.TypeProxy.prototype.get = function (target, prop) {
    const { __type__: type } = this;
    if (prop === 'prototype') {
        return type.proto;
    }
    const propDeclaration = type[prop];
    if (propDeclaration) {
        return propDeclaration;
    }
    if ((0, hop_1.hop)(type, prop)) {
        return propDeclaration;
    }
    if (type.subtypes.has(prop)) {
        return type.subtypes.get(prop);
    }
    return Reflect.get(target, prop);
};
exports.TypeProxy.prototype.set = function (__, name, value) {
    const { __type__: type } = this;
    if (name === 'prototype') {
        checkProto(value);
        type.proto = value;
        return true;
    }
    if (typeof name !== 'string' || !name.length) {
        throw new WRONG_TYPE_DEFINITION('should use non empty string as TypeName');
    }
    if (typeof value !== 'function') {
        throw new WRONG_TYPE_DEFINITION('should use function for type definition');
    }
    const TypeName = name;
    const Constructor = value;
    type.define(TypeName, Constructor);
    return true;
};
exports.TypeProxy.prototype.apply = function (__, Uranus, args) {
    const type = this.__type__;
    let instance = null;
    if (Uranus) {
        const InstanceCreatorProxy = new exports.TypeProxy(type, Uranus);
        instance = new InstanceCreatorProxy(...args);
    }
    else {
        instance = this.construct(null, args);
    }
    return instance;
};
exports.TypeProxy.prototype.construct = function (__, args) {
    const { __type__: type, Uranus } = this;
    const mnemosyneProxy = createMnemosyne(Uranus);
    const instance = new InstanceCreator_1.InstanceCreator(type, mnemosyneProxy, args);
    return instance;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZVByb3h5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS90eXBlcy9UeXBlUHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsWUFBWSxDQUFDOzs7QUFLYixvQ0FBa0M7QUFDbEMsTUFBTSxFQUNMLFVBQVUsR0FDVixHQUFHLGVBQVUsQ0FBQztBQUVmLHlDQUFzQztBQUV0QyxxREFBdUQ7QUFDdkQsTUFBTSxFQUNMLHFCQUFxQixHQUNyQixHQUFHLG9CQUFXLENBQUM7QUFFaEIsMkNBQXFDO0FBQ3JDLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxtQkFBVSxDQUFDO0FBRXZDLHVEQUFvRDtBQUV2QyxRQUFBLFNBQVMsR0FBRyxVQUFXLFFBQWEsRUFBRSxNQUFlO0lBQ2pFLE1BQU0sQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFFO1FBQ3BCLFFBQVE7UUFDUixNQUFNO0tBQ04sQ0FBRSxDQUFDO0lBQ0osTUFBTSxTQUFTLEdBQUcsSUFBSSxLQUFLLENBQUUsaUNBQWUsRUFBRSxJQUFJLENBQUUsQ0FBQztJQUNyRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUE2QixDQUFDO0FBRTlCLGlCQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFXLE1BQVcsRUFBRSxJQUFZO0lBRTdELE1BQU0sRUFDTCxRQUFRLEVBQUUsSUFBSSxFQUNkLEdBQUcsSUFBSSxDQUFDO0lBS1QsSUFBSyxJQUFJLEtBQUssV0FBVyxFQUFHLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ25CLENBQUM7SUFFRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUM7SUFDckMsSUFBSyxlQUFlLEVBQUcsQ0FBQztRQUN2QixPQUFPLGVBQWUsQ0FBQztJQUN4QixDQUFDO0lBSUQsSUFBSyxJQUFBLFNBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFFLEVBQUcsQ0FBQztRQUN6QixPQUFPLGVBQWUsQ0FBQztJQUN4QixDQUFDO0lBR0QsSUFBSyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUUsRUFBRyxDQUFDO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBRSxNQUFNLEVBQUUsSUFBSSxDQUFFLENBQUM7QUFFcEMsQ0FBQyxDQUFDO0FBRUYsaUJBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFVBQVcsRUFBTyxFQUFFLElBQVksRUFBRSxLQUFVO0lBRXJFLE1BQU0sRUFDTCxRQUFRLEVBQUUsSUFBSSxFQUNkLEdBQUcsSUFBSSxDQUFDO0lBR1QsSUFBSyxJQUFJLEtBQUssV0FBVyxFQUFHLENBQUM7UUFDNUIsVUFBVSxDQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELElBQUssT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRyxDQUFDO1FBQ2hELE1BQU0sSUFBSSxxQkFBcUIsQ0FBRSx5Q0FBeUMsQ0FBRSxDQUFDO0lBQzlFLENBQUM7SUFFRCxJQUFLLE9BQU8sS0FBSyxLQUFLLFVBQVUsRUFBRyxDQUFDO1FBQ25DLE1BQU0sSUFBSSxxQkFBcUIsQ0FBRSx5Q0FBeUMsQ0FBRSxDQUFDO0lBQzlFLENBQUM7SUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDdEIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDO0lBRTFCLElBQUksQ0FBQyxNQUFNLENBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBRSxDQUFDO0lBQ3JDLE9BQU8sSUFBSSxDQUFDO0FBRWIsQ0FBQyxDQUFDO0FBR0YsaUJBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVcsRUFBVyxFQUFFLE1BQWUsRUFBRSxJQUFlO0lBQ25GLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDM0IsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLElBQUssTUFBTSxFQUFHLENBQUM7UUFDZCxNQUFNLG9CQUFvQixHQUFHLElBQUksaUJBQVMsQ0FBRSxJQUFJLEVBQUUsTUFBTSxDQUFFLENBQUM7UUFDM0QsUUFBUSxHQUFHLElBQUksb0JBQW9CLENBQUUsR0FBRyxJQUFJLENBQUUsQ0FBQztJQUNoRCxDQUFDO1NBQU0sQ0FBQztRQUNQLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQztJQUN6QyxDQUFDO0lBQ0QsT0FBTyxRQUFRLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBS0YsaUJBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVcsRUFBVyxFQUFFLElBQWU7SUFJdEUsTUFBTSxFQUNMLFFBQVEsRUFBRSxJQUFJLEVBQ2QsTUFBTSxFQUNOLEdBQUcsSUFBSSxDQUFDO0lBRVQsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9DLE1BQU0sUUFBUSxHQUFHLElBQUksaUNBQWUsQ0FBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBRSxDQUFDO0lBQ25FLE9BQU8sUUFBUSxDQUFDO0FBRWpCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgQ29uc3RydWN0b3JGdW5jdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuXG5pbXBvcnQgVHlwZXNVdGlscyBmcm9tICcuLi91dGlscyc7XG5jb25zdCB7XG5cdGNoZWNrUHJvdG8sXG59ID0gVHlwZXNVdGlscztcblxuaW1wb3J0IHsgaG9wIH0gZnJvbSAnLi4vLi4vdXRpbHMvaG9wJztcblxuaW1wb3J0IHsgRXJyb3JzVHlwZXMgfSBmcm9tICcuLi8uLi9kZXNjcmlwdG9ycy9lcnJvcnMnO1xuY29uc3Qge1xuXHRXUk9OR19UWVBFX0RFRklOSVRJT04sXG59ID0gRXJyb3JzVHlwZXM7XG5cbmltcG9ydCBtbmVtb3N5bmVzIGZyb20gJy4vTW5lbW9zeW5lJztcbmNvbnN0IHsgY3JlYXRlTW5lbW9zeW5lIH0gPSBtbmVtb3N5bmVzO1xuXG5pbXBvcnQgeyBJbnN0YW5jZUNyZWF0b3IgfSBmcm9tICcuL0luc3RhbmNlQ3JlYXRvcic7XG5cbmV4cG9ydCBjb25zdCBUeXBlUHJveHkgPSBmdW5jdGlvbiAoIF9fdHlwZV9fOiBhbnksIFVyYW51czogdW5rbm93biApIHtcblx0T2JqZWN0LmFzc2lnbiggdGhpcywge1xuXHRcdF9fdHlwZV9fLFxuXHRcdFVyYW51c1xuXHR9ICk7XG5cdGNvbnN0IHR5cGVQcm94eSA9IG5ldyBQcm94eSggSW5zdGFuY2VDcmVhdG9yLCB0aGlzICk7XG5cdHJldHVybiB0eXBlUHJveHk7XG59IGFzIENvbnN0cnVjdG9yRnVuY3Rpb248YW55PjtcblxuVHlwZVByb3h5LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoIHRhcmdldDogYW55LCBwcm9wOiBzdHJpbmcgKSB7XG5cblx0Y29uc3Qge1xuXHRcdF9fdHlwZV9fOiB0eXBlXG5cdH0gPSB0aGlzO1xuXG5cdC8vIHByb3RvdHlwZSBvZiBwcm94eVxuXHQvLyBjb25zdCBpbnN0YW5jZSA9IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YocmVjZWl2ZXIpO1xuXG5cdGlmICggcHJvcCA9PT0gJ3Byb3RvdHlwZScgKSB7XG5cdFx0cmV0dXJuIHR5cGUucHJvdG87XG5cdH1cblxuXHRjb25zdCBwcm9wRGVjbGFyYXRpb24gPSB0eXBlWyBwcm9wIF07XG5cdGlmICggcHJvcERlY2xhcmF0aW9uICkge1xuXHRcdHJldHVybiBwcm9wRGVjbGFyYXRpb247XG5cdH1cblxuXHQvLyB1c2VkIGZvciBleGlzdGVudCBwcm9wcyB3aXRoIHZhbHVlXG5cdC8vIHVuZGVmaW5lZCB8fCBudWxsIHx8IGZhbHNlXG5cdGlmICggaG9wKCB0eXBlLCBwcm9wICkgKSB7XG5cdFx0cmV0dXJuIHByb3BEZWNsYXJhdGlvbjtcblx0fVxuXG5cdC8vIFNvbWVUeXBlLlNvbWVTdWJUeXBlXG5cdGlmICggdHlwZS5zdWJ0eXBlcy5oYXMoIHByb3AgKSApIHtcblx0XHRyZXR1cm4gdHlwZS5zdWJ0eXBlcy5nZXQoIHByb3AgKTtcblx0fVxuXG5cdHJldHVybiBSZWZsZWN0LmdldCggdGFyZ2V0LCBwcm9wICk7XG5cbn07XG5cblR5cGVQcm94eS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKCBfXzogYW55LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkgKSB7XG5cblx0Y29uc3Qge1xuXHRcdF9fdHlwZV9fOiB0eXBlXG5cdH0gPSB0aGlzO1xuXG5cdC8vIGlzIGFib3V0IHNldHRpbmcgYSBwcm90b3R5cGUgdG8gVHlwZVxuXHRpZiAoIG5hbWUgPT09ICdwcm90b3R5cGUnICkge1xuXHRcdGNoZWNrUHJvdG8oIHZhbHVlICk7XG5cdFx0dHlwZS5wcm90byA9IHZhbHVlO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCB0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgIW5hbWUubGVuZ3RoICkge1xuXHRcdHRocm93IG5ldyBXUk9OR19UWVBFX0RFRklOSVRJT04oICdzaG91bGQgdXNlIG5vbiBlbXB0eSBzdHJpbmcgYXMgVHlwZU5hbWUnICk7XG5cdH1cblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyApIHtcblx0XHR0aHJvdyBuZXcgV1JPTkdfVFlQRV9ERUZJTklUSU9OKCAnc2hvdWxkIHVzZSBmdW5jdGlvbiBmb3IgdHlwZSBkZWZpbml0aW9uJyApO1xuXHR9XG5cblx0Y29uc3QgVHlwZU5hbWUgPSBuYW1lO1xuXHRjb25zdCBDb25zdHJ1Y3RvciA9IHZhbHVlO1xuXG5cdHR5cGUuZGVmaW5lKCBUeXBlTmFtZSwgQ29uc3RydWN0b3IgKTtcblx0cmV0dXJuIHRydWU7XG5cbn07XG5cblxuVHlwZVByb3h5LnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uICggX186IHVua25vd24sIFVyYW51czogdW5rbm93biwgYXJnczogdW5rbm93bltdICkge1xuXHRjb25zdCB0eXBlID0gdGhpcy5fX3R5cGVfXztcblx0bGV0IGluc3RhbmNlID0gbnVsbDtcblx0aWYgKCBVcmFudXMgKSB7XG5cdFx0Y29uc3QgSW5zdGFuY2VDcmVhdG9yUHJveHkgPSBuZXcgVHlwZVByb3h5KCB0eXBlLCBVcmFudXMgKTtcblx0XHRpbnN0YW5jZSA9IG5ldyBJbnN0YW5jZUNyZWF0b3JQcm94eSggLi4uYXJncyApO1xuXHR9IGVsc2Uge1xuXHRcdGluc3RhbmNlID0gdGhpcy5jb25zdHJ1Y3QoIG51bGwsIGFyZ3MgKTtcblx0fVxuXHRyZXR1cm4gaW5zdGFuY2U7XG59O1xuXG5cblxuXG5UeXBlUHJveHkucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uICggX186IHVua25vd24sIGFyZ3M6IHVua25vd25bXSApIHtcblxuXHQvLyBuZXcudGFyZ2V0IGlkIGVxdWFsIHdpdGggdGFyZ2V0IGhlcmVcblx0XG5cdGNvbnN0IHtcblx0XHRfX3R5cGVfXzogdHlwZSxcblx0XHRVcmFudXNcblx0fSA9IHRoaXM7XG5cblx0Y29uc3QgbW5lbW9zeW5lUHJveHkgPSBjcmVhdGVNbmVtb3N5bmUoVXJhbnVzKTtcblxuXHRjb25zdCBpbnN0YW5jZSA9IG5ldyBJbnN0YW5jZUNyZWF0b3IoIHR5cGUsIG1uZW1vc3luZVByb3h5LCBhcmdzICk7XG5cdHJldHVybiBpbnN0YW5jZTtcblxufTtcbiJdfQ==