'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../constants");
const { odp, SymbolConstructorName, SymbolGaia, SymbolReplaceUranus, MNEMONICA, GAIA, URANUS } = constants_1.constants;
const utils_1 = require("../utils");
const { getTypeChecker, findSubTypeFromParent, reflectPrimitiveWrappers } = utils_1.default;
const extract_1 = require("../../utils/extract");
const parent_1 = require("../../utils/parent");
const pick_1 = require("../../utils/pick");
const exceptionConstructor_1 = require("../errors/exceptionConstructor");
const InstanceCreator_1 = require("./InstanceCreator");
const addProps_1 = require("./addProps");
const InstanceRoots = new WeakMap;
const Gaia = function (Uranus) {
    const gaiaProto = Uranus ? Uranus : this;
    const GaiaConstructor = function () { };
    Reflect.setPrototypeOf(GaiaConstructor.prototype, Object.create(gaiaProto));
    const gaia = new GaiaConstructor;
    odp(gaia, MNEMONICA, {
        get() {
            return !Uranus ? GAIA : URANUS;
        }
    });
    return gaia;
};
const MnemonicaProtoProps = {
    extract() {
        return function () {
            return (0, extract_1.extract)(this);
        };
    },
    pick() {
        return function (...args) {
            return (0, pick_1.pick)(this, ...args);
        };
    },
    parent() {
        return function (constructorLookupPath) {
            return (0, parent_1.parent)(this, constructorLookupPath);
        };
    },
    clone() {
        return this.fork();
    },
    fork() {
        const props = (0, addProps_1.getProps)(this);
        const { __type__: type, __collection__: collection, __parent__: existentInstance, __args__, } = props;
        const { isSubType, TypeName } = type;
        const { __self__ } = this;
        return function (...forkArgs) {
            let forked;
            const Constructor = isSubType ?
                existentInstance :
                collection;
            const args = forkArgs.length ? forkArgs : __args__;
            if (this === __self__) {
                forked = new (Constructor[TypeName])(...args);
            }
            else {
                forked = new InstanceCreator_1.InstanceCreator(type, reflectPrimitiveWrappers(this), args);
            }
            return forked;
        };
    },
    [SymbolReplaceUranus]() {
        return function (uranus) {
            Reflect.setPrototypeOf(Reflect.getPrototypeOf(this[SymbolGaia]), uranus);
        };
    },
    [SymbolConstructorName]() {
        return MNEMONICA;
    },
    exception() {
        const self = this;
        return function (error, ...args) {
            const target = new.target;
            return exceptionConstructor_1.default.call(self, target, error, ...args);
        };
    },
    sibling() {
        const siblings = (SiblingTypeName) => {
            const props = (0, addProps_1.getProps)(this);
            const { __collection__: collection, } = props;
            const sibling = collection[SiblingTypeName];
            return sibling;
        };
        return new Proxy(siblings, {
            get(_, prop) {
                return siblings(prop);
            },
            apply(_, __, args) {
                return siblings(args[0]);
            }
        });
    }
};
const MnemosynePrototypeKeys = Object.keys(MnemonicaProtoProps);
const MnemonicaInstanceProps = [
    '__proto_proto__',
    '__type__',
    '__self__',
    '__args__',
    '__parent__',
    '__subtypes__',
    '__stack__',
    '__collection__',
    '__timestamp__',
    '__creator__'
].concat(MnemosynePrototypeKeys);
const staticProps = [
    'constructor',
    'prototype',
    'then',
    'stack',
    'message',
    'domain',
    'on',
    'once',
    'off',
    'inspect',
    'showDiff',
]
    .concat(MnemonicaInstanceProps)
    .concat(Object.getOwnPropertyNames(Object.prototype))
    .concat(Object.getOwnPropertyNames(Function.prototype))
    .reduce((obj, key) => {
    obj[key] = true;
    return obj;
}, Object.create(null));
const makeSubTypeProxy = function (subtype, inheritedInstance) {
    const subtypeProxy = new Proxy(InstanceCreator_1.InstanceCreator, {
        get(Target, _prop) {
            if (_prop === Symbol.hasInstance) {
                return getTypeChecker(subtype.TypeName);
            }
            return Reflect.get(Target, _prop);
        },
        construct(Target, _args) {
            return new Target(subtype, inheritedInstance, _args);
        },
        apply(Target, thisArg, _args) {
            if (thisArg === undefined) {
                thisArg = inheritedInstance;
            }
            let existentInstance = reflectPrimitiveWrappers(thisArg);
            if (!existentInstance[SymbolGaia]) {
                const mnemosyne = new Mnemosyne(new Gaia(existentInstance));
                existentInstance = new Proxy(mnemosyne, {
                    get: mnemosyneProxyHandlerGet
                });
            }
            const entity = new Target(subtype, existentInstance, _args);
            return entity;
        },
    });
    return subtypeProxy;
};
const mnemosyneProxyHandlerGet = (target, prop, receiver) => {
    const result = Reflect.get(target, prop, receiver);
    if (result !== undefined) {
        return result;
    }
    if (typeof prop === 'symbol') {
        return result;
    }
    if (staticProps[prop]) {
        return result;
    }
    const instance = Reflect.getPrototypeOf(receiver);
    const props = (0, addProps_1.getProps)(instance);
    const { __type__: { config: { strictChain }, subtypes }, } = props;
    const subtype = subtypes.has(prop) ?
        subtypes.get(prop) :
        strictChain ?
            undefined :
            findSubTypeFromParent(instance, prop);
    return subtype ? makeSubTypeProxy(subtype, receiver) : result;
};
const Mnemosyne = function (gaia) {
    const instance = this;
    const Mnemonica = function () {
        odp(this, SymbolConstructorName, {
            get() {
                return MNEMONICA;
            }
        });
    };
    const mnemonica = Reflect.getPrototypeOf(gaia);
    Reflect.setPrototypeOf(Mnemonica.prototype, mnemonica);
    Object.entries(MnemonicaProtoProps).forEach(([name, method]) => {
        odp(Mnemonica.prototype, name, {
            get() {
                return method.call(this);
            }
        });
    });
    Object.getOwnPropertySymbols(MnemonicaProtoProps).forEach((symbol) => {
        odp(Mnemonica.prototype, symbol, {
            get() {
                const symbolMethod = Reflect.get(MnemonicaProtoProps, symbol);
                return symbolMethod.call(this);
            }
        });
    });
    odp(Mnemonica.prototype, Symbol.hasInstance, {
        get() {
            return getTypeChecker(this.constructor.name);
        }
    });
    odp(Mnemonica.prototype, SymbolGaia, {
        get() {
            return gaia;
        }
    });
    const proto = new Mnemonica();
    Reflect.setPrototypeOf(instance, proto);
    InstanceRoots.set(instance, proto);
};
const createMnemosyne = function (Uranus) {
    const uranus = reflectPrimitiveWrappers(Uranus);
    const mnemosyne = new Mnemosyne(new Gaia(uranus));
    const mnemosyneProxy = new Proxy(mnemosyne, {
        get: mnemosyneProxyHandlerGet
    });
    return mnemosyneProxy;
};
exports.default = {
    Gaia,
    get createMnemosyne() {
        return createMnemosyne;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW5lbW9zeW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS90eXBlcy9NbmVtb3N5bmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUdiLCtDQUE0QztBQUM1QyxNQUFNLEVBQ0wsR0FBRyxFQUNILHFCQUFxQixFQUNyQixVQUFVLEVBQ1YsbUJBQW1CLEVBRW5CLFNBQVMsRUFDVCxJQUFJLEVBQ0osTUFBTSxFQUVOLEdBQUcscUJBQVMsQ0FBQztBQUVkLG9DQUFrQztBQUNsQyxNQUFNLEVBQ0wsY0FBYyxFQUNkLHFCQUFxQixFQUNyQix3QkFBd0IsRUFDeEIsR0FBRyxlQUFVLENBQUM7QUFFZixpREFBOEM7QUFDOUMsK0NBQTRDO0FBQzVDLDJDQUF3QztBQUV4Qyx5RUFBa0U7QUFFbEUsdURBQW9EO0FBRXBELHlDQUE2QztBQUU3QyxNQUFNLGFBQWEsR0FBRyxJQUFJLE9BQU8sQ0FBQztBQUlsQyxNQUFNLElBQUksR0FBRyxVQUFVLE1BQVc7SUFFakMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUV6QyxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQWdDLENBQUM7SUFDdkUsT0FBTyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUU1RSxNQUFNLElBQUksR0FBRyxJQUFJLGVBQWUsQ0FBQztJQUVqQyxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtRQUNwQixHQUFHO1lBQ0YsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDaEMsQ0FBQztLQUNELENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBZ0MsQ0FBQztBQUdqQyxNQUFNLG1C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QzVDLEdBQUc7WUFDRixPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLENBQUM7S0FDRCxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUU7UUFDcEMsR0FBRztZQUNGLE9BQU8sSUFBSSxDQUFDO1FBQ2IsQ0FBQztLQUNELENBQUMsQ0FBQztJQUVILE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7SUFFOUIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFeEMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFcEMsQ0FBb0QsQ0FBQztBQUVyRCxNQUFNLGVBQWUsR0FBRyxVQUFVLE1BQWU7SUFHaEQsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNsRCxNQUFNLGNBQWMsR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7UUFDM0MsR0FBRyxFQUFHLHdCQUF3QjtLQUM5QixDQUFDLENBQUM7SUFFSCxPQUFPLGNBQWMsQ0FBQztBQUN2QixDQUFDLENBQUM7QUFFRixrQkFBZTtJQUNkLElBQUk7SUFDSixJQUFJLGVBQWU7UUFDbEIsT0FBTyxlQUFlLENBQUM7SUFDeEIsQ0FBQztDQU9ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IENvbnN0cnVjdG9yRnVuY3Rpb24gfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBjb25zdGFudHMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuY29uc3Qge1xuXHRvZHAsXG5cdFN5bWJvbENvbnN0cnVjdG9yTmFtZSxcblx0U3ltYm9sR2FpYSxcblx0U3ltYm9sUmVwbGFjZVVyYW51cyxcblxuXHRNTkVNT05JQ0EsXG5cdEdBSUEsXG5cdFVSQU5VU1xuXG59ID0gY29uc3RhbnRzO1xuXG5pbXBvcnQgVHlwZXNVdGlscyBmcm9tICcuLi91dGlscyc7XG5jb25zdCB7XG5cdGdldFR5cGVDaGVja2VyLFxuXHRmaW5kU3ViVHlwZUZyb21QYXJlbnQsXG5cdHJlZmxlY3RQcmltaXRpdmVXcmFwcGVyc1xufSA9IFR5cGVzVXRpbHM7XG5cbmltcG9ydCB7IGV4dHJhY3QgfSBmcm9tICcuLi8uLi91dGlscy9leHRyYWN0JztcbmltcG9ydCB7IHBhcmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3BhcmVudCc7XG5pbXBvcnQgeyBwaWNrIH0gZnJvbSAnLi4vLi4vdXRpbHMvcGljayc7XG5cbmltcG9ydCBleGNlcHRpb25Db25zdHJ1Y3RvciBmcm9tICcuLi9lcnJvcnMvZXhjZXB0aW9uQ29uc3RydWN0b3InO1xuXG5pbXBvcnQgeyBJbnN0YW5jZUNyZWF0b3IgfSBmcm9tICcuL0luc3RhbmNlQ3JlYXRvcic7XG5cbmltcG9ydCB7IGdldFByb3BzLCBQcm9wcyB9IGZyb20gJy4vYWRkUHJvcHMnO1xuXG5jb25zdCBJbnN0YW5jZVJvb3RzID0gbmV3IFdlYWtNYXA7XG5cblxuXG5jb25zdCBHYWlhID0gZnVuY3Rpb24gKFVyYW51czogYW55KSB7XG5cblx0Y29uc3QgZ2FpYVByb3RvID0gVXJhbnVzID8gVXJhbnVzIDogdGhpcztcblxuXHRjb25zdCBHYWlhQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IH0gYXMgQ29uc3RydWN0b3JGdW5jdGlvbjxvYmplY3Q+O1xuXHRSZWZsZWN0LnNldFByb3RvdHlwZU9mKEdhaWFDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIE9iamVjdC5jcmVhdGUoZ2FpYVByb3RvKSk7XG5cblx0Y29uc3QgZ2FpYSA9IG5ldyBHYWlhQ29uc3RydWN0b3I7XG5cblx0b2RwKGdhaWEsIE1ORU1PTklDQSwge1xuXHRcdGdldCAoKSB7XG5cdFx0XHRyZXR1cm4gIVVyYW51cyA/IEdBSUEgOiBVUkFOVVM7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gZ2FpYTtcbn0gYXMgQ29uc3RydWN0b3JGdW5jdGlvbjxvYmplY3Q+O1xuXG5cbmNvbnN0IE1uZW1vbmljYVByb3RvUHJvcHMgPSB7XG5cblx0ZXh0cmFjdCAoKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh0aGlzOiBhbnkpIHtcblx0XHRcdHJldHVybiBleHRyYWN0KHRoaXMpO1xuXHRcdH07XG5cdH0sXG5cblx0cGljayAoKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh0aGlzOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XG5cdFx0XHRyZXR1cm4gcGljayh0aGlzLCAuLi5hcmdzKTtcblx0XHR9O1xuXHR9LFxuXG5cdHBhcmVudCAoKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh0aGlzOiBhbnksIGNvbnN0cnVjdG9yTG9va3VwUGF0aDogc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcGFyZW50KHRoaXMsIGNvbnN0cnVjdG9yTG9va3VwUGF0aCk7XG5cdFx0fTtcblx0fSxcblxuXHRjbG9uZSAodGhpczogYW55KSB7XG5cdFx0cmV0dXJuIHRoaXMuZm9yaygpO1xuXHR9LFxuXG5cdGZvcmsgKHRoaXM6IGFueSkge1xuXG5cdFx0Y29uc3QgcHJvcHMgPSBnZXRQcm9wcyh0aGlzKSBhcyBQcm9wcztcblxuXHRcdGNvbnN0IHtcblx0XHRcdF9fdHlwZV9fOiB0eXBlLFxuXHRcdFx0X19jb2xsZWN0aW9uX186IGNvbGxlY3Rpb24sXG5cdFx0XHRfX3BhcmVudF9fOiBleGlzdGVudEluc3RhbmNlLFxuXHRcdFx0X19hcmdzX18sXG5cdFx0fSA9IHByb3BzO1xuXG5cdFx0Y29uc3Qge1xuXHRcdFx0aXNTdWJUeXBlLFxuXHRcdFx0VHlwZU5hbWVcblx0XHR9ID0gdHlwZTtcblxuXG5cdFx0Y29uc3QgeyBfX3NlbGZfXyB9ID0gdGhpcztcblxuXHRcdC8vICdmdW5jdGlvbicsIGNhdXNlIG1pZ2h0IGJlIGNhbGxlZCB3aXRoICduZXcnXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuXHRcdHJldHVybiBmdW5jdGlvbiAodGhpczogYW55LCAuLi5mb3JrQXJnczogYW55W10pIHtcblxuXHRcdFx0bGV0IGZvcmtlZDtcblx0XHRcdGNvbnN0IENvbnN0cnVjdG9yID0gaXNTdWJUeXBlID9cblx0XHRcdFx0ZXhpc3RlbnRJbnN0YW5jZSA6XG5cdFx0XHRcdGNvbGxlY3Rpb247XG5cblx0XHRcdGNvbnN0IGFyZ3MgPSBmb3JrQXJncy5sZW5ndGggPyBmb3JrQXJncyA6IF9fYXJnc19fO1xuXG5cblx0XHRcdGlmICh0aGlzID09PSBfX3NlbGZfXykge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG5cdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgXG5cdFx0XHRcdGZvcmtlZCA9IG5ldyAoQ29uc3RydWN0b3JbIFR5cGVOYW1lIF0pKC4uLmFyZ3MpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gZm9yay5jYWxsID8gbGV0J3MgZG8gaXQgIVxuXHRcdFx0XHRmb3JrZWQgPSBuZXcgSW5zdGFuY2VDcmVhdG9yKHR5cGUsIHJlZmxlY3RQcmltaXRpdmVXcmFwcGVycyh0aGlzKSwgYXJncyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmb3JrZWQ7XG5cblx0XHR9O1xuXHR9LFxuXG5cdFsgU3ltYm9sUmVwbGFjZVVyYW51cyBdICgpIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuXHRcdHJldHVybiBmdW5jdGlvbiAodGhpczogYW55LCB1cmFudXM6IGFueSkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0UmVmbGVjdC5zZXRQcm90b3R5cGVPZihSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRoaXNbIFN5bWJvbEdhaWEgXSksIHVyYW51cyk7XG5cdFx0fTtcblx0fSxcblxuXHRbIFN5bWJvbENvbnN0cnVjdG9yTmFtZSBdICgpIHtcblx0XHRyZXR1cm4gTU5FTU9OSUNBO1xuXHR9LFxuXG5cdGV4Y2VwdGlvbiAoKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChlcnJvcjogRXJyb3IsIC4uLmFyZ3M6IGFueVtdKSB7XG5cdFx0XHRjb25zdCB0YXJnZXQgPSBuZXcudGFyZ2V0O1xuXHRcdFx0cmV0dXJuIGV4Y2VwdGlvbkNvbnN0cnVjdG9yLmNhbGwoc2VsZiwgdGFyZ2V0LCBlcnJvciwgLi4uYXJncyk7XG5cdFx0fTtcblx0fSxcblxuXHRzaWJsaW5nICgpIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblx0XHRjb25zdCBzaWJsaW5ncyA9IChTaWJsaW5nVHlwZU5hbWU6IHN0cmluZykgPT4ge1xuXG5cdFx0XHRjb25zdCBwcm9wcyA9IGdldFByb3BzKHRoaXMpIGFzIFByb3BzO1xuXHRcdFx0Y29uc3Qge1xuXHRcdFx0XHRfX2NvbGxlY3Rpb25fXzogY29sbGVjdGlvbixcblx0XHRcdH0gPSBwcm9wcztcblx0XHRcdGNvbnN0IHNpYmxpbmc6IGFueSA9IGNvbGxlY3Rpb25bIFNpYmxpbmdUeXBlTmFtZSBdO1xuXHRcdFx0cmV0dXJuIHNpYmxpbmc7XG5cdFx0fTtcblxuXHRcdHJldHVybiBuZXcgUHJveHkoc2libGluZ3MsIHtcblx0XHRcdGdldCAoXywgcHJvcDogc3RyaW5nKSB7XG5cdFx0XHRcdHJldHVybiBzaWJsaW5ncyhwcm9wKTtcblx0XHRcdH0sXG5cdFx0XHRhcHBseSAoXywgX18sIGFyZ3MsKSB7XG5cdFx0XHRcdHJldHVybiBzaWJsaW5ncyhhcmdzWyAwIF0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cbn07XG5cbmNvbnN0IE1uZW1vc3luZVByb3RvdHlwZUtleXMgPSBPYmplY3Qua2V5cyhNbmVtb25pY2FQcm90b1Byb3BzKTtcblxuY29uc3QgTW5lbW9uaWNhSW5zdGFuY2VQcm9wcyA9IFtcblx0J19fcHJvdG9fcHJvdG9fXycsXG5cblx0J19fdHlwZV9fJyxcblx0J19fc2VsZl9fJyxcblxuXHQnX19hcmdzX18nLFxuXG5cdCdfX3BhcmVudF9fJyxcblx0J19fc3VidHlwZXNfXycsXG5cblx0J19fc3RhY2tfXycsXG5cblx0J19fY29sbGVjdGlvbl9fJyxcblx0J19fdGltZXN0YW1wX18nLFxuXG5cdCdfX2NyZWF0b3JfXydcblxuXS5jb25jYXQoTW5lbW9zeW5lUHJvdG90eXBlS2V5cyk7XG5cbmNvbnN0IHN0YXRpY1Byb3BzID0gW1xuXG5cdC8vIGJ1aWx0aW5zOiBmdW5jdGlvbnMgKyBQcm9taXNlc1xuXHQnY29uc3RydWN0b3InLFxuXHQncHJvdG90eXBlJyxcblx0J3RoZW4nLFxuXG5cdC8vIGJ1aWx0aW5zOiBlcnJvcnNcblx0J3N0YWNrJyxcblx0J21lc3NhZ2UnLFxuXHQnZG9tYWluJyxcblxuXHQvLyBidWlsdGluczogRXZlbnRFbWl0dGVyXG5cdCdvbicsXG5cdCdvbmNlJyxcblx0J29mZicsXG5cblx0Ly8gbW9jaGEgKyBjaGFpID0+IGJ1ZzogLi91dGlscy5qcyAuZmluZFN1YlR5cGVGcm9tUGFyZW50ICdpbnNwZWN0J1xuXHQnaW5zcGVjdCcsXG5cdCdzaG93RGlmZicsXG5cbl1cblx0LmNvbmNhdChNbmVtb25pY2FJbnN0YW5jZVByb3BzKVxuXHQuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5wcm90b3R5cGUpKVxuXHQuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEZ1bmN0aW9uLnByb3RvdHlwZSkpXG5cdC5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG5cdFx0b2JqWyBrZXkgXSA9IHRydWU7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogb25seS1hcnJvdy1mdW5jdGlvbnNcbmNvbnN0IG1ha2VTdWJUeXBlUHJveHkgPSBmdW5jdGlvbiAoc3VidHlwZTogYW55LCBpbmhlcml0ZWRJbnN0YW5jZTogYW55KSB7XG5cblx0Y29uc3Qgc3VidHlwZVByb3h5ID0gbmV3IFByb3h5KEluc3RhbmNlQ3JlYXRvciwge1xuXG5cdFx0Z2V0IChUYXJnZXQsIF9wcm9wKSB7XG5cblx0XHRcdGlmIChfcHJvcCA9PT0gU3ltYm9sLmhhc0luc3RhbmNlKSB7XG5cdFx0XHRcdHJldHVybiBnZXRUeXBlQ2hlY2tlcihzdWJ0eXBlLlR5cGVOYW1lKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFJlZmxlY3QuZ2V0KFRhcmdldCwgX3Byb3ApO1xuXG5cdFx0fSxcblxuXHRcdGNvbnN0cnVjdCAoVGFyZ2V0LCBfYXJncykge1xuXHRcdFx0cmV0dXJuIG5ldyBUYXJnZXQoc3VidHlwZSwgaW5oZXJpdGVkSW5zdGFuY2UsIF9hcmdzKTtcblx0XHR9LFxuXG5cdFx0YXBwbHkgKFRhcmdldCwgdGhpc0FyZywgX2FyZ3MpIHtcblxuXHRcdFx0aWYgKHRoaXNBcmcgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aGlzQXJnID0gaW5oZXJpdGVkSW5zdGFuY2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRPRE86IGlmIHdlIHdvdWxkIG1ha2UgbmV3IGtleXdvcmQgb2JsaWdhdG9yeVxuXHRcdFx0Ly8gdGhlbiB3ZSBzaG91bGQgYXZvaWQgaXQgaGVyZSwgd2l0aCB0aHJvdyBFcnJvclxuXG5cdFx0XHRsZXQgZXhpc3RlbnRJbnN0YW5jZSA9IHJlZmxlY3RQcmltaXRpdmVXcmFwcGVycyh0aGlzQXJnKTtcblxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0aWYgKCFleGlzdGVudEluc3RhbmNlWyBTeW1ib2xHYWlhIF0pIHtcblx0XHRcdFx0Y29uc3QgbW5lbW9zeW5lID0gbmV3IE1uZW1vc3luZShuZXcgR2FpYShleGlzdGVudEluc3RhbmNlKSk7XG5cdFx0XHRcdGV4aXN0ZW50SW5zdGFuY2UgPSBuZXcgUHJveHkobW5lbW9zeW5lLCB7XG5cdFx0XHRcdFx0Z2V0IDogbW5lbW9zeW5lUHJveHlIYW5kbGVyR2V0XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0Ly8gZWxzZSBpcyB0aGUgb3JkaW5hcnkgd2F5IGZvciBhbGwgZW50aXRpZXNcblxuXHRcdFx0Y29uc3QgZW50aXR5ID0gbmV3IFRhcmdldChzdWJ0eXBlLCBleGlzdGVudEluc3RhbmNlLCBfYXJncyk7XG5cdFx0XHRyZXR1cm4gZW50aXR5O1xuXHRcdH0sXG5cblx0fSk7XG5cblx0cmV0dXJuIHN1YnR5cGVQcm94eTtcbn07XG5cblxuY29uc3QgbW5lbW9zeW5lUHJveHlIYW5kbGVyR2V0ID0gKHRhcmdldDogYW55LCBwcm9wOiBzdHJpbmcsIHJlY2VpdmVyOiBhbnkpID0+IHtcblxuXHQvLyBOb2RlLmpzIDIyIFJlZmxlY3QuZ2V0IEJlaGF2aW91ciBDaGFuZ2VkIGhlcmVcblx0Ly8gY2F1c2Ugc29tZXRoaW5nIGdvbmUgd3Jvbmcgd2l0aCBwcm9wIGFzc2lnbm1lbnRcblx0Ly8gc28gbm93IGlmIHdlIG5lZWQgLnN0YWNrLCB3ZSBzaG91bGQgYXZvaWQgcmVjZWl2ZXIgaGVyZVxuXHQvLyBuYXZlIG5vdCB5ZXQgY2hlY2tlZCBvdGhlciBzdGF0aWNQcm9wcyxcblx0Ly8ganVzdCBmaXhlZCB0aGlzIGJlbG93XG5cdC8vIHdoaWxlIHVzaW5nIGNvbmRpdGlvbmFsIGZvciBzdGF0aWNQcm9wc1xuXHRjb25zdCByZXN1bHQgPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcblxuXHRpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0aWYgKHR5cGVvZiBwcm9wID09PSAnc3ltYm9sJykge1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRpZiAoc3RhdGljUHJvcHNbIHByb3AgXSkge1xuXHRcdC8qXG5cdFx0Y29uc3QgbWF5QmVSZXN1bHQgPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3ApO1xuXHRcdGlmIChtYXlCZVJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gbWF5QmVSZXN1bHQ7XG5cdFx0fVxuXHRcdCovXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8vIHByb3RvdHlwZSBvZiBwcm94eVxuXHRjb25zdCBpbnN0YW5jZTogYW55ID0gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihyZWNlaXZlcik7XG5cblx0Y29uc3QgcHJvcHMgPSBnZXRQcm9wcyhpbnN0YW5jZSkgYXMgUHJvcHM7XG5cdGNvbnN0IHtcblx0XHRfX3R5cGVfXzoge1xuXHRcdFx0Y29uZmlnOiB7XG5cdFx0XHRcdHN0cmljdENoYWluXG5cdFx0XHR9LFxuXHRcdFx0c3VidHlwZXNcblx0XHR9LFxuXHR9ID0gcHJvcHM7XG5cblxuXHRjb25zdCBzdWJ0eXBlID0gc3VidHlwZXMuaGFzKHByb3ApID9cblx0XHRzdWJ0eXBlcy5nZXQocHJvcCkgOlxuXHRcdHN0cmljdENoYWluID9cblx0XHRcdHVuZGVmaW5lZCA6XG5cdFx0XHRmaW5kU3ViVHlwZUZyb21QYXJlbnQoaW5zdGFuY2UsIHByb3ApO1xuXG5cdHJldHVybiBzdWJ0eXBlID8gbWFrZVN1YlR5cGVQcm94eShzdWJ0eXBlLCByZWNlaXZlcikgOiByZXN1bHQ7XG59O1xuXG5cbmNvbnN0IE1uZW1vc3luZSA9IGZ1bmN0aW9uIChnYWlhOiBhbnkpIHtcblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcblx0Y29uc3QgaW5zdGFuY2UgPSB0aGlzO1xuXG5cdGNvbnN0IE1uZW1vbmljYTogYW55ID0gZnVuY3Rpb24gKHRoaXM6IGFueSkge1xuXHRcdG9kcCh0aGlzLCBTeW1ib2xDb25zdHJ1Y3Rvck5hbWUsIHtcblx0XHRcdGdldCAoKSB7XG5cdFx0XHRcdHJldHVybiBNTkVNT05JQ0E7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cblx0Y29uc3QgbW5lbW9uaWNhID0gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihnYWlhKTtcblxuXHRSZWZsZWN0LnNldFByb3RvdHlwZU9mKE1uZW1vbmljYS5wcm90b3R5cGUsIG1uZW1vbmljYSk7XG5cblx0T2JqZWN0LmVudHJpZXMoTW5lbW9uaWNhUHJvdG9Qcm9wcykuZm9yRWFjaCgoWyBuYW1lLCBtZXRob2QgXTogW3N0cmluZywgYW55XSkgPT4ge1xuXHRcdG9kcChNbmVtb25pY2EucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRnZXQgKHRoaXM6IGFueSkge1xuXHRcdFx0XHRyZXR1cm4gbWV0aG9kLmNhbGwodGhpcyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cdE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTW5lbW9uaWNhUHJvdG9Qcm9wcykuZm9yRWFjaCgoc3ltYm9sOiBzeW1ib2wpID0+IHtcblx0XHRvZHAoTW5lbW9uaWNhLnByb3RvdHlwZSwgc3ltYm9sLCB7XG5cdFx0XHRnZXQgKCkge1xuXHRcdFx0XHRjb25zdCBzeW1ib2xNZXRob2QgPSBSZWZsZWN0LmdldChNbmVtb25pY2FQcm90b1Byb3BzLCBzeW1ib2wpO1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0cmV0dXJuIHN5bWJvbE1ldGhvZC5jYWxsKHRoaXMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblxuXHQvLyBpbnN0YW5jZSBvZiBzZWxmIENvbnN0cnVjdG9yIHR5cGVcblx0b2RwKE1uZW1vbmljYS5wcm90b3R5cGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuXHRcdGdldCAoKSB7XG5cdFx0XHRyZXR1cm4gZ2V0VHlwZUNoZWNrZXIodGhpcy5jb25zdHJ1Y3Rvci5uYW1lKTtcblx0XHR9XG5cdH0pO1xuXG5cdG9kcChNbmVtb25pY2EucHJvdG90eXBlLCBTeW1ib2xHYWlhLCB7XG5cdFx0Z2V0ICgpIHtcblx0XHRcdHJldHVybiBnYWlhO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgcHJvdG8gPSBuZXcgTW5lbW9uaWNhKCk7XG5cblx0UmVmbGVjdC5zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgcHJvdG8pO1xuXG5cdEluc3RhbmNlUm9vdHMuc2V0KGluc3RhbmNlLCBwcm90byk7XG5cbn0gYXMgQ29uc3RydWN0b3JGdW5jdGlvbjx0eXBlb2YgTW5lbW9uaWNhUHJvdG9Qcm9wcz47XG5cbmNvbnN0IGNyZWF0ZU1uZW1vc3luZSA9IGZ1bmN0aW9uIChVcmFudXM6IHVua25vd24pIHtcblx0Ly8gY29uc3RydWN0cyBuZXcgR2FpYSAtPiBuZXcgTW5lbW9zeW5lXG5cdC8vIHRvIGJ1aWxkIHRoZSBmaXJzdCBpbnN0YW5jZSBpbiBjaGFpblxuXHRjb25zdCB1cmFudXMgPSByZWZsZWN0UHJpbWl0aXZlV3JhcHBlcnMoVXJhbnVzKTtcblx0Y29uc3QgbW5lbW9zeW5lID0gbmV3IE1uZW1vc3luZShuZXcgR2FpYSh1cmFudXMpKTtcblx0Y29uc3QgbW5lbW9zeW5lUHJveHkgPSBuZXcgUHJveHkobW5lbW9zeW5lLCB7XG5cdFx0Z2V0IDogbW5lbW9zeW5lUHJveHlIYW5kbGVyR2V0XG5cdH0pO1xuXG5cdHJldHVybiBtbmVtb3N5bmVQcm94eTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0R2FpYSxcblx0Z2V0IGNyZWF0ZU1uZW1vc3luZSAoKSB7XG5cdFx0cmV0dXJuIGNyZWF0ZU1uZW1vc3luZTtcblx0fSxcblx0Ly8gZ2V0IE1uZW1vc3luZVByb3RvdHlwZUtleXMgKCkge1xuXHQvLyBcdHJldHVybiBNbmVtb3N5bmVQcm90b3R5cGVLZXlzO1xuXHQvLyB9LFxuXHQvLyBnZXQgSW5zdGFuY2VSb290cyAoKSB7XG5cdC8vIFx0cmV0dXJuIEluc3RhbmNlUm9vdHM7XG5cdC8vIH1cbn07XG4iXX0=