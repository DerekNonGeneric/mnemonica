'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.setProps = exports.getProps = exports._setSelf = exports._getProps = exports._addProps = void 0;
const constants_1 = require("../../constants");
const { odp, } = constants_1.constants;
const __props__ = new WeakMap();
const _addProps = function () {
    const self = this;
    const { type, existentInstance, args, config: { submitStack }, __proto_proto__: proto } = self;
    const { collection, subtypes, } = type;
    const value = Object.create(null);
    odp(value, '__proto_proto__', {
        get() {
            return proto;
        }
    });
    odp(value, '__args__', {
        get() {
            return args;
        }
    });
    odp(value, '__collection__', {
        get() {
            return collection;
        }
    });
    odp(value, '__subtypes__', {
        get() {
            return subtypes;
        }
    });
    odp(value, '__type__', {
        get() {
            return type;
        }
    });
    odp(value, '__parent__', {
        get() {
            return existentInstance;
        }
    });
    if (submitStack) {
        const { stack } = this;
        odp(value, '__stack__', {
            get() {
                return stack.join('\n');
            }
        });
    }
    odp(value, '__creator__', {
        get() {
            return self;
        }
    });
    const timestamp = Date.now();
    odp(value, '__timestamp__', {
        get() {
            return timestamp;
        }
    });
    __props__.set(proto, value);
};
exports._addProps = _addProps;
const _getProps = (instance, base) => {
    const proto = Reflect.getPrototypeOf(instance);
    if (base !== undefined && (base.constructor !== proto.constructor)) {
        return undefined;
    }
    const result = __props__.get(proto);
    if (result === undefined) {
        if (base === undefined) {
            base = instance;
        }
        return (0, exports._getProps)(proto, base);
    }
    return result;
};
exports._getProps = _getProps;
const _setSelf = (instance) => {
    const props = (0, exports._getProps)(instance);
    Object.defineProperty(props, '__self__', {
        get() {
            return instance;
        }
    });
    __props__.set(instance, props);
};
exports._setSelf = _setSelf;
const getProps = (instance) => {
    const props = (0, exports._getProps)(instance);
    if (props) {
        const additions = __props__.get(props);
        if (additions instanceof Object) {
            const descriptors = Object.getOwnPropertyDescriptors(props);
            const answer = Object.assign({}, additions);
            Object.defineProperties(additions, descriptors);
            return answer;
        }
        else {
            return props;
        }
    }
    return undefined;
};
exports.getProps = getProps;
const setProps = (instance, values) => {
    const props = (0, exports._getProps)(instance);
    if (props) {
        __props__.set(props, values);
        return true;
    }
    return false;
};
exports.setProps = setProps;
module.exports = {
    _addProps: exports._addProps,
    _getProps: exports._getProps,
    _setSelf: exports._setSelf,
    getProps: exports.getProps,
    setProps: exports.setProps
};
//# sourceMappingURL=data:application/json;base64,