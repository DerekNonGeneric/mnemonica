'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.addProps = void 0;
const constants_1 = require("../../constants");
const { odp, } = constants_1.constants;
const addProps = function () {
    const self = this;
    const { type, existentInstance, args, config: { submitStack }, __proto_proto__: proto } = self;
    const { collection, subtypes, } = type;
    odp(proto, '__proto_proto__', {
        get() {
            return proto;
        }
    });
    odp(proto, '__args__', {
        get() {
            return args;
        }
    });
    odp(proto, '__collection__', {
        get() {
            return collection;
        }
    });
    odp(proto, '__subtypes__', {
        get() {
            return subtypes;
        }
    });
    odp(proto, '__type__', {
        get() {
            return type;
        }
    });
    odp(proto, '__parent__', {
        get() {
            return existentInstance;
        }
    });
    if (submitStack) {
        const { stack } = this;
        odp(proto, '__stack__', {
            get() {
                return stack.join('\n');
            }
        });
    }
    odp(proto, '__creator__', {
        get() {
            return self;
        }
    });
    const timestamp = Date.now();
    odp(proto, '__timestamp__', {
        get() {
            return timestamp;
        }
    });
};
exports.addProps = addProps;
module.exports = {
    addProps: exports.addProps
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkUHJvcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL3R5cGVzL2FkZFByb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7O0FBRWIsK0NBQTRDO0FBRTVDLE1BQU0sRUFDTCxHQUFHLEdBQ0gsR0FBRyxxQkFBUyxDQUFDO0FBRVAsTUFBTSxRQUFRLEdBQUc7SUFHdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBRWxCLE1BQU0sRUFDTCxJQUFJLEVBQ0osZ0JBQWdCLEVBQ2hCLElBQUksRUFDSixNQUFNLEVBQUUsRUFDUCxXQUFXLEVBQ1gsRUFDRCxlQUFlLEVBQUUsS0FBSyxFQUN0QixHQUFHLElBQUksQ0FBQztJQUVULE1BQU0sRUFDTCxVQUFVLEVBQ1YsUUFBUSxHQUNSLEdBQUcsSUFBSSxDQUFDO0lBRVQsR0FBRyxDQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtRQUM5QixHQUFHO1lBQ0YsT0FBTyxLQUFLLENBQUM7UUFDZCxDQUFDO0tBQ0QsQ0FBRSxDQUFDO0lBRUosR0FBRyxDQUFFLEtBQUssRUFBRSxVQUFVLEVBQUU7UUFDdkIsR0FBRztZQUNGLE9BQU8sSUFBSSxDQUFDO1FBQ2IsQ0FBQztLQUNELENBQUUsQ0FBQztJQUVKLEdBQUcsQ0FBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7UUFDN0IsR0FBRztZQUNGLE9BQU8sVUFBVSxDQUFDO1FBQ25CLENBQUM7S0FDRCxDQUFFLENBQUM7SUFFSixHQUFHLENBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRTtRQUMzQixHQUFHO1lBQ0YsT0FBTyxRQUFRLENBQUM7UUFDakIsQ0FBQztLQUNELENBQUUsQ0FBQztJQUVKLEdBQUcsQ0FBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO1FBQ3ZCLEdBQUc7WUFDRixPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7S0FDRCxDQUFFLENBQUM7SUFFSixHQUFHLENBQUUsS0FBSyxFQUFFLFlBQVksRUFBRTtRQUN6QixHQUFHO1lBQ0YsT0FBTyxnQkFBZ0IsQ0FBQztRQUN6QixDQUFDO0tBQ0QsQ0FBRSxDQUFDO0lBRUosSUFBSyxXQUFXLEVBQUcsQ0FBQztRQUNuQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLEdBQUcsQ0FBRSxLQUFLLEVBQUUsV0FBVyxFQUFFO1lBQ3hCLEdBQUc7Z0JBQ0YsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDO1lBQzNCLENBQUM7U0FDRCxDQUFFLENBQUM7SUFDTCxDQUFDO0lBRUQsR0FBRyxDQUFFLEtBQUssRUFBRSxhQUFhLEVBQUU7UUFDMUIsR0FBRztZQUNGLE9BQU8sSUFBSSxDQUFDO1FBQ2IsQ0FBQztLQUNELENBQUUsQ0FBQztJQUVKLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM3QixHQUFHLENBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRTtRQUM1QixHQUFHO1lBQ0YsT0FBTyxTQUFTLENBQUM7UUFDbEIsQ0FBQztLQUNELENBQUUsQ0FBQztBQUVMLENBQUMsQ0FBQztBQTlFVyxRQUFBLFFBQVEsWUE4RW5CO0FBQ0YsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNoQixRQUFRLEVBQVIsZ0JBQVE7Q0FDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBjb25zdGFudHMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuXG5jb25zdCB7XG5cdG9kcCxcbn0gPSBjb25zdGFudHM7XG5cbmV4cG9ydCBjb25zdCBhZGRQcm9wcyA9IGZ1bmN0aW9uICggdGhpczogYW55ICk6IGFueSB7XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG5cdGNvbnN0IHNlbGYgPSB0aGlzO1xuXG5cdGNvbnN0IHtcblx0XHR0eXBlLFxuXHRcdGV4aXN0ZW50SW5zdGFuY2UsXG5cdFx0YXJncyxcblx0XHRjb25maWc6IHtcblx0XHRcdHN1Ym1pdFN0YWNrXG5cdFx0fSxcblx0XHRfX3Byb3RvX3Byb3RvX186IHByb3RvXG5cdH0gPSBzZWxmO1xuXG5cdGNvbnN0IHtcblx0XHRjb2xsZWN0aW9uLFxuXHRcdHN1YnR5cGVzLFxuXHR9ID0gdHlwZTtcblxuXHRvZHAoIHByb3RvLCAnX19wcm90b19wcm90b19fJywge1xuXHRcdGdldCAoKSB7XG5cdFx0XHRyZXR1cm4gcHJvdG87XG5cdFx0fVxuXHR9ICk7XG5cblx0b2RwKCBwcm90bywgJ19fYXJnc19fJywge1xuXHRcdGdldCAoKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cdH0gKTtcblxuXHRvZHAoIHByb3RvLCAnX19jb2xsZWN0aW9uX18nLCB7XG5cdFx0Z2V0ICgpIHtcblx0XHRcdHJldHVybiBjb2xsZWN0aW9uO1xuXHRcdH1cblx0fSApO1xuXG5cdG9kcCggcHJvdG8sICdfX3N1YnR5cGVzX18nLCB7XG5cdFx0Z2V0ICgpIHtcblx0XHRcdHJldHVybiBzdWJ0eXBlcztcblx0XHR9XG5cdH0gKTtcblxuXHRvZHAoIHByb3RvLCAnX190eXBlX18nLCB7XG5cdFx0Z2V0ICgpIHtcblx0XHRcdHJldHVybiB0eXBlO1xuXHRcdH1cblx0fSApO1xuXG5cdG9kcCggcHJvdG8sICdfX3BhcmVudF9fJywge1xuXHRcdGdldCAoKSB7XG5cdFx0XHRyZXR1cm4gZXhpc3RlbnRJbnN0YW5jZTtcblx0XHR9XG5cdH0gKTtcblxuXHRpZiAoIHN1Ym1pdFN0YWNrICkge1xuXHRcdGNvbnN0IHsgc3RhY2sgfSA9IHRoaXM7XG5cdFx0b2RwKCBwcm90bywgJ19fc3RhY2tfXycsIHtcblx0XHRcdGdldCAoKSB7XG5cdFx0XHRcdHJldHVybiBzdGFjay5qb2luKCAnXFxuJyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxuXG5cdG9kcCggcHJvdG8sICdfX2NyZWF0b3JfXycsIHtcblx0XHRnZXQgKCkge1xuXHRcdFx0cmV0dXJuIHNlbGY7XG5cdFx0fVxuXHR9ICk7XG5cblx0Y29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcblx0b2RwKCBwcm90bywgJ19fdGltZXN0YW1wX18nLCB7XG5cdFx0Z2V0ICgpIHtcblx0XHRcdHJldHVybiB0aW1lc3RhbXA7XG5cdFx0fVxuXHR9ICk7XG5cbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0YWRkUHJvcHNcbn07XG4iXX0=