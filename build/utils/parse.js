'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const errors_1 = require("../descriptors/errors");
const { WRONG_MODIFICATION_PATTERN, WRONG_ARGUMENTS_USED } = errors_1.ErrorsTypes;
const constants_1 = require("../constants");
const { SymbolGaia } = constants_1.constants;
const extract_1 = require("./extract");
const hop_1 = require("./hop");
const parse = (self) => {
    if (!self || !self.constructor) {
        throw new WRONG_MODIFICATION_PATTERN;
    }
    const proto = Reflect.getPrototypeOf(self);
    if (self.constructor.name.toString() !== proto.constructor.name.toString()) {
        throw new WRONG_ARGUMENTS_USED(`have to use "instance" itself: '${self.constructor.name}' vs '${proto.constructor.name}'`);
    }
    const protoProto = Reflect.getPrototypeOf(proto);
    if (protoProto && proto.constructor.name.toString() !== protoProto.constructor.name.toString()) {
        throw new WRONG_ARGUMENTS_USED(`have to use "instance" itself: '${proto.constructor.name}' vs '${protoProto.constructor.name}'`);
    }
    const { name } = proto.constructor;
    const props = (0, extract_1.extract)(Object.assign({}, self));
    delete props.constructor;
    const joint = (0, extract_1.extract)(Object.assign({}, proto));
    delete joint.constructor;
    let parent;
    let gaia;
    if ((0, hop_1.hop)(protoProto, SymbolGaia)) {
        parent = protoProto;
        gaia = self[SymbolGaia];
    }
    else {
        parent = (0, exports.parse)(Reflect.getPrototypeOf(protoProto));
        gaia = parent.gaia;
    }
    return {
        name,
        props,
        self,
        proto,
        joint,
        parent,
        gaia
    };
};
exports.parse = parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvcGFyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFFYixrREFBb0Q7QUFDcEQsTUFBTSxFQUNMLDBCQUEwQixFQUMxQixvQkFBb0IsRUFDcEIsR0FBRyxvQkFBVyxDQUFDO0FBRWhCLDRDQUF5QztBQUN6QyxNQUFNLEVBQ0wsVUFBVSxFQUNWLEdBQUcscUJBQVMsQ0FBQztBQUVkLHVDQUFvQztBQUVwQywrQkFBNEI7QUFFckIsTUFBTSxLQUFLLEdBQUcsQ0FBRSxJQUFTLEVBQVEsRUFBRTtJQUV6QyxJQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRyxDQUFDO1FBQ2xDLE1BQU0sSUFBSSwwQkFBMEIsQ0FBQztJQUN0QyxDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBRSxJQUFJLENBQVksQ0FBQztJQUV2RCxJQUFLLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFHLENBQUM7UUFDOUUsTUFBTSxJQUFJLG9CQUFvQixDQUFFLG1DQUFtQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksU0FBUyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFFLENBQUM7SUFDOUgsQ0FBQztJQUVELE1BQU0sVUFBVSxHQUFRLE9BQU8sQ0FBQyxjQUFjLENBQUUsS0FBSyxDQUFFLENBQUM7SUFDeEQsSUFBSyxVQUFVLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUcsQ0FBQztRQUNsRyxNQUFNLElBQUksb0JBQW9CLENBQUUsbUNBQW1DLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxTQUFTLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUUsQ0FBQztJQUNwSSxDQUFDO0lBS0QsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFFbkMsTUFBTSxLQUFLLEdBQVEsSUFBQSxpQkFBTyxvQkFBTyxJQUFJLEVBQUksQ0FBQztJQUUxQyxPQUFPLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFFekIsTUFBTSxLQUFLLEdBQVEsSUFBQSxpQkFBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUUsRUFBRSxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUM7SUFDekQsT0FBTyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBRXpCLElBQUksTUFBTSxDQUFDO0lBQ1gsSUFBSSxJQUFJLENBQUM7SUFDVCxJQUFLLElBQUEsU0FBRyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUUsRUFBRyxDQUFDO1FBQ3JDLE1BQU0sR0FBRyxVQUFVLENBQUM7UUFFcEIsSUFBSSxHQUFHLElBQUksQ0FBRSxVQUFVLENBQUUsQ0FBQztJQUMzQixDQUFDO1NBQU0sQ0FBQztRQUNQLE1BQU0sR0FBRyxJQUFBLGFBQUssRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFFLFVBQVUsQ0FBRSxDQUFFLENBQUM7UUFFdkQsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELE9BQU87UUFFTixJQUFJO1FBRUosS0FBSztRQUdMLElBQUk7UUFDSixLQUFLO1FBRUwsS0FBSztRQUVMLE1BQU07UUFDTixJQUFJO0tBRUosQ0FBQztBQUNILENBQUMsQ0FBQztBQXpEVyxRQUFBLEtBQUssU0F5RGhCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBFcnJvcnNUeXBlcyB9IGZyb20gJy4uL2Rlc2NyaXB0b3JzL2Vycm9ycyc7XG5jb25zdCB7XG5cdFdST05HX01PRElGSUNBVElPTl9QQVRURVJOLFxuXHRXUk9OR19BUkdVTUVOVFNfVVNFRFxufSA9IEVycm9yc1R5cGVzO1xuXG5pbXBvcnQgeyBjb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuY29uc3Qge1xuXHRTeW1ib2xHYWlhXG59ID0gY29uc3RhbnRzO1xuXG5pbXBvcnQgeyBleHRyYWN0IH0gZnJvbSAnLi9leHRyYWN0JztcblxuaW1wb3J0IHsgaG9wIH0gZnJvbSAnLi9ob3AnO1xuXG5leHBvcnQgY29uc3QgcGFyc2UgPSAoIHNlbGY6IGFueSApOiBhbnkgPT4ge1xuXG5cdGlmICggIXNlbGYgfHwgIXNlbGYuY29uc3RydWN0b3IgKSB7XG5cdFx0dGhyb3cgbmV3IFdST05HX01PRElGSUNBVElPTl9QQVRURVJOO1xuXHR9XG5cblx0Y29uc3QgcHJvdG8gPSBSZWZsZWN0LmdldFByb3RvdHlwZU9mKCBzZWxmICkgYXMgb2JqZWN0O1xuXG5cdGlmICggc2VsZi5jb25zdHJ1Y3Rvci5uYW1lLnRvU3RyaW5nKCkgIT09IHByb3RvLmNvbnN0cnVjdG9yLm5hbWUudG9TdHJpbmcoKSApIHtcblx0XHR0aHJvdyBuZXcgV1JPTkdfQVJHVU1FTlRTX1VTRUQoIGBoYXZlIHRvIHVzZSBcImluc3RhbmNlXCIgaXRzZWxmOiAnJHtzZWxmLmNvbnN0cnVjdG9yLm5hbWV9JyB2cyAnJHtwcm90by5jb25zdHJ1Y3Rvci5uYW1lfSdgICk7XG5cdH1cblxuXHRjb25zdCBwcm90b1Byb3RvOiBhbnkgPSBSZWZsZWN0LmdldFByb3RvdHlwZU9mKCBwcm90byApO1xuXHRpZiAoIHByb3RvUHJvdG8gJiYgcHJvdG8uY29uc3RydWN0b3IubmFtZS50b1N0cmluZygpICE9PSBwcm90b1Byb3RvLmNvbnN0cnVjdG9yLm5hbWUudG9TdHJpbmcoKSApIHtcblx0XHR0aHJvdyBuZXcgV1JPTkdfQVJHVU1FTlRTX1VTRUQoIGBoYXZlIHRvIHVzZSBcImluc3RhbmNlXCIgaXRzZWxmOiAnJHtwcm90by5jb25zdHJ1Y3Rvci5uYW1lfScgdnMgJyR7cHJvdG9Qcm90by5jb25zdHJ1Y3Rvci5uYW1lfSdgICk7XG5cdH1cblxuXHQvLyBjb25zdCBhcmdzID0gc2VsZltTeW1ib2xDb25zdHJ1Y3Rvck5hbWVdID9cblx0Ly8gc2VsZltTeW1ib2xDb25zdHJ1Y3Rvck5hbWVdLmFyZ3MgOiBbXTtcblxuXHRjb25zdCB7IG5hbWUgfSA9IHByb3RvLmNvbnN0cnVjdG9yO1xuXG5cdGNvbnN0IHByb3BzOiBhbnkgPSBleHRyYWN0KCB7IC4uLnNlbGYgfSApO1xuXHQvLyBwcm9wcy5jb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcblx0ZGVsZXRlIHByb3BzLmNvbnN0cnVjdG9yO1xuXG5cdGNvbnN0IGpvaW50OiBhbnkgPSBleHRyYWN0KCBPYmplY3QuYXNzaWduKCB7fSwgcHJvdG8gKSApO1xuXHRkZWxldGUgam9pbnQuY29uc3RydWN0b3I7XG5cblx0bGV0IHBhcmVudDtcblx0bGV0IGdhaWE7XG5cdGlmICggaG9wKCBwcm90b1Byb3RvLCBTeW1ib2xHYWlhICkgKSB7XG5cdFx0cGFyZW50ID0gcHJvdG9Qcm90bztcblx0XHQvLyBTeW1ib2xHYWlhIG1lYW5zIHdlIGFyZSByZWFjaGVkIHByb3RvdHlwZSBjaGFpbiByb290XG5cdFx0Z2FpYSA9IHNlbGZbIFN5bWJvbEdhaWEgXTtcblx0fSBlbHNlIHtcblx0XHRwYXJlbnQgPSBwYXJzZSggUmVmbGVjdC5nZXRQcm90b3R5cGVPZiggcHJvdG9Qcm90byApICk7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cdFx0Z2FpYSA9IHBhcmVudC5nYWlhO1xuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdG5hbWUsXG5cblx0XHRwcm9wcyxcblx0XHQvLyB0aGUgbGluZSBiZWxvdyBjb3B5IHN5bWJvbHMgYWxzb1xuXG5cdFx0c2VsZixcblx0XHRwcm90byxcblxuXHRcdGpvaW50LFxuXHRcdC8vIGFyZ3MsXG5cdFx0cGFyZW50LFxuXHRcdGdhaWFcblxuXHR9O1xufTtcbiJdfQ==