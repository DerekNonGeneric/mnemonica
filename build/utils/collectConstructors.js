'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectConstructors = void 0;
const constants_1 = require("../constants");
const { MNEMOSYNE, MNEMONICA, GAIA, } = constants_1.constants;
const getAdditor = (constructors) => {
    return Array.isArray(constructors) ?
        (name) => {
            constructors.push(name);
        } : (name) => {
        constructors[name] = true;
    };
};
const getAccumulator = (asSequence) => {
    return asSequence ? [] : {};
};
const collectConstructors = (self, asSequence = false) => {
    const constructors = getAccumulator(asSequence);
    const addToSequence = getAdditor(constructors);
    if (typeof self === 'object') {
        if (self === null) {
            return constructors;
        }
    }
    else {
        return constructors;
    }
    let proto = Reflect.getPrototypeOf(self);
    let mnemonicaReached = false;
    while (proto) {
        if (!proto.constructor) {
            addToSequence(proto);
            break;
        }
        const constructorName = proto.constructor.name;
        if (constructorName === GAIA) {
            self = proto;
            proto = Reflect.getPrototypeOf(self);
            continue;
        }
        if (constructorName === MNEMONICA) {
            if (!mnemonicaReached) {
                addToSequence(constructorName);
                addToSequence(MNEMOSYNE);
                mnemonicaReached = true;
            }
        }
        else if (constructorName === 'Object') {
            addToSequence(constructorName);
            break;
        }
        else {
            addToSequence(constructorName);
        }
        self = proto;
        proto = Reflect.getPrototypeOf(self);
    }
    return constructors;
};
exports.collectConstructors = collectConstructors;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdENvbnN0cnVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jb2xsZWN0Q29uc3RydWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7O0FBRWIsNENBQXlDO0FBRXpDLE1BQU0sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULElBQUksR0FDSixHQUFHLHFCQUFTLENBQUM7QUFFZCxNQUFNLFVBQVUsR0FBRyxDQUFFLFlBQXVELEVBQUcsRUFBRTtJQUNoRixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUUsWUFBWSxDQUFFLENBQUMsQ0FBQztRQUNyQyxDQUFFLElBQVksRUFBRyxFQUFFO1lBQ2xCLFlBQVksQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFFLElBQVksRUFBRyxFQUFFO1FBQ3RCLFlBQVksQ0FBRSxJQUFJLENBQUUsR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQyxDQUFDO0FBRUosQ0FBQyxDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQUcsQ0FBRSxVQUFtQixFQUFHLEVBQUU7SUFDaEQsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzdCLENBQUMsQ0FBQztBQUVLLE1BQU0sbUJBQW1CLEdBQUcsQ0FBRSxJQUFZLEVBQUUsVUFBVSxHQUFHLEtBQUssRUFBRyxFQUFFO0lBRXpFLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBRSxVQUFVLENBQUUsQ0FBQztJQUNsRCxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUUsWUFBWSxDQUFFLENBQUM7SUFFakQsSUFBSyxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUcsQ0FBQztRQUNoQyxJQUFLLElBQUksS0FBSyxJQUFJLEVBQUcsQ0FBQztZQUNyQixPQUFPLFlBQVksQ0FBQztRQUNyQixDQUFDO0lBQ0YsQ0FBQztTQUFNLENBQUM7UUFDUCxPQUFPLFlBQVksQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBSSxLQUFLLEdBQVEsT0FBTyxDQUFDLGNBQWMsQ0FBRSxJQUFJLENBQUUsQ0FBQztJQUNoRCxJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUM3QixPQUFRLEtBQUssRUFBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFeEIsYUFBYSxDQUFFLEtBQUssQ0FBRSxDQUFDO1lBQ3ZCLE1BQU07UUFDUCxDQUFDO1FBQ0QsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDL0MsSUFBSyxlQUFlLEtBQUssSUFBSSxFQUFHLENBQUM7WUFDaEMsSUFBSSxHQUFHLEtBQUssQ0FBQztZQUNiLEtBQUssR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFFLElBQUksQ0FBRSxDQUFDO1lBQ3ZDLFNBQVM7UUFDVixDQUFDO1FBQ0QsSUFBSyxlQUFlLEtBQUssU0FBUyxFQUFHLENBQUM7WUFDckMsSUFBSyxDQUFDLGdCQUFnQixFQUFHLENBQUM7Z0JBQ3pCLGFBQWEsQ0FBRSxlQUFlLENBQUUsQ0FBQztnQkFDakMsYUFBYSxDQUFFLFNBQVMsQ0FBRSxDQUFDO2dCQUMzQixnQkFBZ0IsR0FBRyxJQUFJLENBQUM7WUFDekIsQ0FBQztRQUNGLENBQUM7YUFBTSxJQUFLLGVBQWUsS0FBSyxRQUFRLEVBQUcsQ0FBQztZQUMzQyxhQUFhLENBQUUsZUFBZSxDQUFFLENBQUM7WUFDakMsTUFBTTtRQUNQLENBQUM7YUFBTSxDQUFDO1lBQ1AsYUFBYSxDQUFFLGVBQWUsQ0FBRSxDQUFDO1FBQ2xDLENBQUM7UUFDRCxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsS0FBSyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUUsSUFBSSxDQUFFLENBQUM7SUFDeEMsQ0FBQztJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3JCLENBQUMsQ0FBQztBQTNDVyxRQUFBLG1CQUFtQix1QkEyQzlCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBjb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5jb25zdCB7XG5cdE1ORU1PU1lORSxcblx0TU5FTU9OSUNBLFxuXHRHQUlBLFxufSA9IGNvbnN0YW50cztcblxuY29uc3QgZ2V0QWRkaXRvciA9ICggY29uc3RydWN0b3JzOiBzdHJpbmdbXSB8IHsgWyBpbmRleDogc3RyaW5nIF06IGJvb2xlYW4gfSApID0+IHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkoIGNvbnN0cnVjdG9ycyApID9cblx0XHQoIG5hbWU6IHN0cmluZyApID0+IHtcblx0XHRcdGNvbnN0cnVjdG9ycy5wdXNoKCBuYW1lICk7XG5cdFx0fSA6ICggbmFtZTogc3RyaW5nICkgPT4ge1xuXHRcdFx0Y29uc3RydWN0b3JzWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH07XG5cbn07XG5cbmNvbnN0IGdldEFjY3VtdWxhdG9yID0gKCBhc1NlcXVlbmNlOiBib29sZWFuICkgPT4ge1xuXHRyZXR1cm4gYXNTZXF1ZW5jZSA/IFtdIDoge307XG59O1xuXG5leHBvcnQgY29uc3QgY29sbGVjdENvbnN0cnVjdG9ycyA9ICggc2VsZjogb2JqZWN0LCBhc1NlcXVlbmNlID0gZmFsc2UgKSA9PiB7XG5cblx0Y29uc3QgY29uc3RydWN0b3JzID0gZ2V0QWNjdW11bGF0b3IoIGFzU2VxdWVuY2UgKTtcblx0Y29uc3QgYWRkVG9TZXF1ZW5jZSA9IGdldEFkZGl0b3IoIGNvbnN0cnVjdG9ycyApO1xuXG5cdGlmICggdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnICkge1xuXHRcdGlmICggc2VsZiA9PT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBjb25zdHJ1Y3RvcnM7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvcnM7XG5cdH1cblxuXHRsZXQgcHJvdG86IGFueSA9IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YoIHNlbGYgKTtcblx0bGV0IG1uZW1vbmljYVJlYWNoZWQgPSBmYWxzZTtcblx0d2hpbGUgKCBwcm90byApIHtcblx0XHRpZiAoIXByb3RvLmNvbnN0cnVjdG9yKSB7XG5cdFx0XHQvLyB0aGlzIGlzIE9iamVjdC5jcmVhdGUobnVsbClcblx0XHRcdGFkZFRvU2VxdWVuY2UoIHByb3RvICk7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Y29uc3QgY29uc3RydWN0b3JOYW1lID0gcHJvdG8uY29uc3RydWN0b3IubmFtZTtcblx0XHRpZiAoIGNvbnN0cnVjdG9yTmFtZSA9PT0gR0FJQSApIHtcblx0XHRcdHNlbGYgPSBwcm90bztcblx0XHRcdHByb3RvID0gUmVmbGVjdC5nZXRQcm90b3R5cGVPZiggc2VsZiApO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmICggY29uc3RydWN0b3JOYW1lID09PSBNTkVNT05JQ0EgKSB7XG5cdFx0XHRpZiAoICFtbmVtb25pY2FSZWFjaGVkICkge1xuXHRcdFx0XHRhZGRUb1NlcXVlbmNlKCBjb25zdHJ1Y3Rvck5hbWUgKTtcblx0XHRcdFx0YWRkVG9TZXF1ZW5jZSggTU5FTU9TWU5FICk7XG5cdFx0XHRcdG1uZW1vbmljYVJlYWNoZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIGNvbnN0cnVjdG9yTmFtZSA9PT0gJ09iamVjdCcgKSB7XG5cdFx0XHRhZGRUb1NlcXVlbmNlKCBjb25zdHJ1Y3Rvck5hbWUgKTtcblx0XHRcdGJyZWFrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhZGRUb1NlcXVlbmNlKCBjb25zdHJ1Y3Rvck5hbWUgKTtcblx0XHR9XG5cdFx0c2VsZiA9IHByb3RvO1xuXHRcdHByb3RvID0gUmVmbGVjdC5nZXRQcm90b3R5cGVPZiggc2VsZiApO1xuXHR9XG5cdHJldHVybiBjb25zdHJ1Y3RvcnM7XG59O1xuIl19