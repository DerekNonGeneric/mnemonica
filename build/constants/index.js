'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.constants = void 0;
const MNEMONICA = 'Mnemonica';
const MNEMOSYNE = 'Mnemosyne';
const GAIA = 'Gaia';
const URANUS = 'Uranus';
const SymbolDefaultTypesCollection = Symbol(`default ${MNEMONICA} types collection`);
const SymbolParentType = Symbol('Parent of this SubType Collection');
const SymbolConstructorName = Symbol('Defined Constructor Name');
const SymbolGaia = Symbol('Defined Gaia Constructor');
const SymbolReplaceUranus = Symbol('Defined Method Name to Replace Gaia');
const SymbolConfig = Symbol('Mnemonica Config Data');
const SymbolUsed = Symbol('.prototype used twice');
const TYPE_TITLE_PREFIX = 'modificator of : ';
const ErrorMessages = {
    BASE_ERROR_MESSAGE: 'UNPREDICTABLE BEHAVIOUR',
    TYPENAME_MUST_BE_A_STRING: 'typename must be a string',
    HANDLER_MUST_BE_A_FUNCTION: 'handler must be a function',
    WRONG_TYPE_DEFINITION: 'wrong type definition',
    WRONG_INSTANCE_INVOCATION: 'wrong instance invocation',
    WRONG_MODIFICATION_PATTERN: 'wrong modification pattern',
    ALREADY_DECLARED: 'this type has already been declared',
    WRONG_ARGUMENTS_USED: 'wrong arguments : should use proper invocation',
    WRONG_HOOK_TYPE: 'this hook type does not exist',
    MISSING_HOOK_CALLBACK: 'hook definition requires callback',
    MISSING_CALLBACK_ARGUMENT: 'callback is required argument',
    FLOW_CHECKER_REDEFINITION: 'attempt to re-define flow checker callback',
    OPTIONS_ERROR: 'options must be an object or a string',
    WRONG_STACK_CLEANER: 'wrong stack cleaner instanceof',
    PROTOTYPE_USED_TWICE: '.prototype used twice',
};
const createInstanceModificator_1 = require("../api/types/createInstanceModificator");
const defaultOptions = {
    get ModificationConstructor() {
        return createInstanceModificator_1.default;
    },
    get strictChain() {
        return true;
    },
    get blockErrors() {
        return true;
    },
    get submitStack() {
        return false;
    },
    get awaitReturn() {
        return true;
    },
};
exports.constants = {
    get 'SymbolParentType'() {
        return SymbolParentType;
    },
    get 'SymbolConstructorName'() {
        return SymbolConstructorName;
    },
    get 'SymbolGaia'() {
        return SymbolGaia;
    },
    get 'SymbolReplaceUranus'() {
        return SymbolReplaceUranus;
    },
    get 'SymbolDefaultTypesCollection'() {
        return SymbolDefaultTypesCollection;
    },
    get 'SymbolConfig'() {
        return SymbolConfig;
    },
    get 'SymbolUsed'() {
        return SymbolUsed;
    },
    get 'MNEMONICA'() {
        return MNEMONICA;
    },
    get 'MNEMOSYNE'() {
        return MNEMOSYNE;
    },
    get 'GAIA'() {
        return GAIA;
    },
    get 'URANUS'() {
        return URANUS;
    },
    get 'odp'() {
        return (o, p, attributes) => {
            return Object.defineProperty(o, p, attributes);
        };
    },
    get 'defaultOptions'() {
        return defaultOptions;
    },
    get 'defaultOptionsKeys'() {
        return Object.keys(defaultOptions);
    },
    TYPE_TITLE_PREFIX,
    ErrorMessages,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3RhbnRzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7O0FBR2IsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDO0FBSzlCLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQztBQUk5QixNQUFNLElBQUksR0FBRyxNQUFNLENBQUM7QUFDcEIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBR3hCLE1BQU0sNEJBQTRCLEdBQUcsTUFBTSxDQUFFLFdBQVcsU0FBUyxtQkFBbUIsQ0FBRSxDQUFDO0FBQ3ZGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFFLG1DQUFtQyxDQUFFLENBQUM7QUFDdkUsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUUsMEJBQTBCLENBQUUsQ0FBQztBQUduRSxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUUsMEJBQTBCLENBQUUsQ0FBQztBQUN4RCxNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBRSxxQ0FBcUMsQ0FBRSxDQUFDO0FBRTVFLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBRSx1QkFBdUIsQ0FBRSxDQUFDO0FBQ3ZELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBRSx1QkFBdUIsQ0FBRSxDQUFDO0FBR3JELE1BQU0saUJBQWlCLEdBQUcsbUJBQW1CLENBQUM7QUFHOUMsTUFBTSxhQUFhLEdBQUc7SUFFckIsa0JBQWtCLEVBQVcseUJBQXlCO0lBQ3RELHlCQUF5QixFQUFJLDJCQUEyQjtJQUN4RCwwQkFBMEIsRUFBRyw0QkFBNEI7SUFDekQscUJBQXFCLEVBQVEsdUJBQXVCO0lBQ3BELHlCQUF5QixFQUFJLDJCQUEyQjtJQUN4RCwwQkFBMEIsRUFBRyw0QkFBNEI7SUFDekQsZ0JBQWdCLEVBQWEscUNBQXFDO0lBRWxFLG9CQUFvQixFQUFTLGdEQUFnRDtJQUM3RSxlQUFlLEVBQWMsK0JBQStCO0lBQzVELHFCQUFxQixFQUFRLG1DQUFtQztJQUNoRSx5QkFBeUIsRUFBSSwrQkFBK0I7SUFDNUQseUJBQXlCLEVBQUksNENBQTRDO0lBQ3pFLGFBQWEsRUFBZ0IsdUNBQXVDO0lBQ3BFLG1CQUFtQixFQUFVLGdDQUFnQztJQUM3RCxvQkFBb0IsRUFBUyx1QkFBdUI7Q0FFcEQsQ0FBQztBQUVGLHNGQUE2RTtBQUU3RSxNQUFNLGNBQWMsR0FBRztJQUV0QixJQUFJLHVCQUF1QjtRQUMxQixPQUFPLG1DQUF1QixDQUFDO0lBQ2hDLENBQUM7SUFLRCxJQUFJLFdBQVc7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFPRCxJQUFJLFdBQVc7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFLRCxJQUFJLFdBQVc7UUFDZCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFLRCxJQUFJLFdBQVc7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FFMEIsQ0FBQztBQUVoQixRQUFBLFNBQVMsR0FBRztJQUV4QixJQUFJLGtCQUFrQjtRQUNyQixPQUFPLGdCQUFnQixDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLHVCQUF1QjtRQUMxQixPQUFPLHFCQUFxQixDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZixPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxxQkFBcUI7UUFDeEIsT0FBTyxtQkFBbUIsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSw4QkFBOEI7UUFDakMsT0FBTyw0QkFBNEIsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2pCLE9BQU8sWUFBWSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZixPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBR0QsSUFBSSxXQUFXO1FBQ2QsT0FBTyxTQUFTLENBQUM7SUFDbEIsQ0FBQztJQUNELElBQUksV0FBVztRQUNkLE9BQU8sU0FBUyxDQUFDO0lBQ2xCLENBQUM7SUFDRCxJQUFJLE1BQU07UUFDVCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDWCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFDRCxJQUFJLEtBQUs7UUFDUixPQUFPLENBQUUsQ0FBTSxFQUFFLENBQWMsRUFBRSxVQUE4QyxFQUFRLEVBQUU7WUFDeEYsT0FBTyxNQUFNLENBQUMsY0FBYyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFFLENBQUM7UUFDbEQsQ0FBQyxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksZ0JBQWdCO1FBQ25CLE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLG9CQUFvQjtRQUN2QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUUsY0FBYyxDQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELGlCQUFpQjtJQUVqQixhQUFhO0NBRWIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gbmFtZXNcbmNvbnN0IE1ORU1PTklDQSA9ICdNbmVtb25pY2EnO1xuXG4vLyBPIEdyZWF0IE1uZW1vc3luZSEgUGxlYXNlIVxuLy8gU2F2ZSB1cyBmcm9tIE9ibGl2aW9uLi4uXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NbmVtb3N5bmVcbmNvbnN0IE1ORU1PU1lORSA9ICdNbmVtb3N5bmUnO1xuXG4vLyBHYWlhIC0gV2lraXBlZGlhXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HYWlhXG5jb25zdCBHQUlBID0gJ0dhaWEnO1xuY29uc3QgVVJBTlVTID0gJ1VyYW51cyc7XG5cbi8vIHN5bWJvbHNcbmNvbnN0IFN5bWJvbERlZmF1bHRUeXBlc0NvbGxlY3Rpb24gPSBTeW1ib2woIGBkZWZhdWx0ICR7TU5FTU9OSUNBfSB0eXBlcyBjb2xsZWN0aW9uYCApO1xuY29uc3QgU3ltYm9sUGFyZW50VHlwZSA9IFN5bWJvbCggJ1BhcmVudCBvZiB0aGlzIFN1YlR5cGUgQ29sbGVjdGlvbicgKTtcbmNvbnN0IFN5bWJvbENvbnN0cnVjdG9yTmFtZSA9IFN5bWJvbCggJ0RlZmluZWQgQ29uc3RydWN0b3IgTmFtZScgKTtcblxuLy8gU3ltYm9sR2FpYSBtZWFucyB3ZSBhcmUgcmVhY2hlZCBwcm90b3R5cGUgY2hhaW4gcm9vdFxuY29uc3QgU3ltYm9sR2FpYSA9IFN5bWJvbCggJ0RlZmluZWQgR2FpYSBDb25zdHJ1Y3RvcicgKTtcbmNvbnN0IFN5bWJvbFJlcGxhY2VVcmFudXMgPSBTeW1ib2woICdEZWZpbmVkIE1ldGhvZCBOYW1lIHRvIFJlcGxhY2UgR2FpYScgKTtcblxuY29uc3QgU3ltYm9sQ29uZmlnID0gU3ltYm9sKCAnTW5lbW9uaWNhIENvbmZpZyBEYXRhJyApO1xuY29uc3QgU3ltYm9sVXNlZCA9IFN5bWJvbCggJy5wcm90b3R5cGUgdXNlZCB0d2ljZScgKTtcblxuLy8gZXRjLi4uXG5jb25zdCBUWVBFX1RJVExFX1BSRUZJWCA9ICdtb2RpZmljYXRvciBvZiA6ICc7XG5cbi8vIGVycm9yc1xuY29uc3QgRXJyb3JNZXNzYWdlcyA9IHtcblxuXHRCQVNFX0VSUk9SX01FU1NBR0UgICAgICAgICA6ICdVTlBSRURJQ1RBQkxFIEJFSEFWSU9VUicsXG5cdFRZUEVOQU1FX01VU1RfQkVfQV9TVFJJTkcgIDogJ3R5cGVuYW1lIG11c3QgYmUgYSBzdHJpbmcnLFxuXHRIQU5ETEVSX01VU1RfQkVfQV9GVU5DVElPTiA6ICdoYW5kbGVyIG11c3QgYmUgYSBmdW5jdGlvbicsXG5cdFdST05HX1RZUEVfREVGSU5JVElPTiAgICAgIDogJ3dyb25nIHR5cGUgZGVmaW5pdGlvbicsXG5cdFdST05HX0lOU1RBTkNFX0lOVk9DQVRJT04gIDogJ3dyb25nIGluc3RhbmNlIGludm9jYXRpb24nLFxuXHRXUk9OR19NT0RJRklDQVRJT05fUEFUVEVSTiA6ICd3cm9uZyBtb2RpZmljYXRpb24gcGF0dGVybicsXG5cdEFMUkVBRFlfREVDTEFSRUQgICAgICAgICAgIDogJ3RoaXMgdHlwZSBoYXMgYWxyZWFkeSBiZWVuIGRlY2xhcmVkJyxcblx0Ly8gRVhJU1RFTlRfUFJPUEVSVFlfUkVERUZJTklUSU9OIDogJ2F0dGVtcHQgdG8gcmUtZGVmaW5lIHR5cGUgY29uc3RydWN0b3InLFxuXHRXUk9OR19BUkdVTUVOVFNfVVNFRCAgICAgICA6ICd3cm9uZyBhcmd1bWVudHMgOiBzaG91bGQgdXNlIHByb3BlciBpbnZvY2F0aW9uJyxcblx0V1JPTkdfSE9PS19UWVBFICAgICAgICAgICAgOiAndGhpcyBob29rIHR5cGUgZG9lcyBub3QgZXhpc3QnLFxuXHRNSVNTSU5HX0hPT0tfQ0FMTEJBQ0sgICAgICA6ICdob29rIGRlZmluaXRpb24gcmVxdWlyZXMgY2FsbGJhY2snLFxuXHRNSVNTSU5HX0NBTExCQUNLX0FSR1VNRU5UICA6ICdjYWxsYmFjayBpcyByZXF1aXJlZCBhcmd1bWVudCcsXG5cdEZMT1dfQ0hFQ0tFUl9SRURFRklOSVRJT04gIDogJ2F0dGVtcHQgdG8gcmUtZGVmaW5lIGZsb3cgY2hlY2tlciBjYWxsYmFjaycsXG5cdE9QVElPTlNfRVJST1IgICAgICAgICAgICAgIDogJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3Qgb3IgYSBzdHJpbmcnLFxuXHRXUk9OR19TVEFDS19DTEVBTkVSICAgICAgICA6ICd3cm9uZyBzdGFjayBjbGVhbmVyIGluc3RhbmNlb2YnLFxuXHRQUk9UT1RZUEVfVVNFRF9UV0lDRSAgICAgICA6ICcucHJvdG90eXBlIHVzZWQgdHdpY2UnLFxuXG59O1xuXG5pbXBvcnQgTW9kaWZpY2F0aW9uQ29uc3RydWN0b3IgZnJvbSAnLi4vYXBpL3R5cGVzL2NyZWF0ZUluc3RhbmNlTW9kaWZpY2F0b3InO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcblxuXHRnZXQgTW9kaWZpY2F0aW9uQ29uc3RydWN0b3IgKCkge1xuXHRcdHJldHVybiBNb2RpZmljYXRpb25Db25zdHJ1Y3Rvcjtcblx0fSxcblxuXHQvLyBzaGFsbCBvciBub3Qgd2UgdXNlIHN0cmljdCBjaGVja2luZ1xuXHQvLyBmb3IgY3JlYXRpb24gc3ViLWluc3RhbmNlcyBPbmx5IGZyb20gY3VycmVudCB0eXBlXG5cdC8vIG9yIHdlIG1pZ2h0IHVzZSB1cC1uZXN0ZWQgc3ViLWluc3RhbmNlcyBmcm9tIGNoYWluXG5cdGdldCBzdHJpY3RDaGFpbiAoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gc2hvdWxkIHdlIHVzZSBmb3JjZWQgZXJyb3JzIGNoZWNraW5nXG5cdC8vIHRvIG1ha2UgYWxsIGluaGVyaXRlZCB0eXBlcyBlcnJvcmVkXG5cdC8vIGlmIHRoZXJlIGlzIGFuIGVycm9yIHNvbWV3aGVyZSBpbiBjaGFpblxuXHQvLyBkaXNhbGxvdyBpbnN0YW5jZSBjb25zdHJ1Y3Rpb25cblx0Ly8gaWYgdGhlcmUgaXMgYW4gZXJyb3IgaW4gcHJvdG90eXBlIGNoYWluXG5cdGdldCBibG9ja0Vycm9ycyAoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gaWYgaXQgaXMgbmVjZXNzYXJ5IHRvIGNvbGxlY3Qgc3RhY2tcblx0Ly8gYXMgYSBfX3N0YWNrX18gcHJvdG90eXBlIHByb3BlcnR5XG5cdC8vIGR1cmluZyB0aGUgcHJvY2VzcyBvZiBpbnN0YW5jZSBjcmVhdGlvblxuXHRnZXQgc3VibWl0U3RhY2sgKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHQvLyBhd2FpdCBuZXcgQ29uc3RydWN0b3IoKVxuXHQvLyBtdXN0IHJldHVybiB2YWx1ZVxuXHQvLyBvcHRpb25hbCAuL2lzc3Vlcy8xMDZcblx0Z2V0IGF3YWl0UmV0dXJuICgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxufSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuZXhwb3J0IGNvbnN0IGNvbnN0YW50cyA9IHtcblxuXHRnZXQgJ1N5bWJvbFBhcmVudFR5cGUnICgpIHtcblx0XHRyZXR1cm4gU3ltYm9sUGFyZW50VHlwZTtcblx0fSxcblxuXHRnZXQgJ1N5bWJvbENvbnN0cnVjdG9yTmFtZScgKCkge1xuXHRcdHJldHVybiBTeW1ib2xDb25zdHJ1Y3Rvck5hbWU7XG5cdH0sXG5cblx0Z2V0ICdTeW1ib2xHYWlhJyAoKSB7XG5cdFx0cmV0dXJuIFN5bWJvbEdhaWE7XG5cdH0sXG5cblx0Z2V0ICdTeW1ib2xSZXBsYWNlVXJhbnVzJyAoKSB7XG5cdFx0cmV0dXJuIFN5bWJvbFJlcGxhY2VVcmFudXM7XG5cdH0sXG5cblx0Z2V0ICdTeW1ib2xEZWZhdWx0VHlwZXNDb2xsZWN0aW9uJyAoKSB7XG5cdFx0cmV0dXJuIFN5bWJvbERlZmF1bHRUeXBlc0NvbGxlY3Rpb247XG5cdH0sXG5cblx0Z2V0ICdTeW1ib2xDb25maWcnICgpIHtcblx0XHRyZXR1cm4gU3ltYm9sQ29uZmlnO1xuXHR9LFxuXG5cdGdldCAnU3ltYm9sVXNlZCcgKCkge1xuXHRcdHJldHVybiBTeW1ib2xVc2VkO1xuXHR9LFxuXG5cdC8vIGNvbnN0YW50c1xuXHRnZXQgJ01ORU1PTklDQScgKCkge1xuXHRcdHJldHVybiBNTkVNT05JQ0E7XG5cdH0sXG5cdGdldCAnTU5FTU9TWU5FJyAoKSB7XG5cdFx0cmV0dXJuIE1ORU1PU1lORTtcblx0fSxcblx0Z2V0ICdHQUlBJyAoKSB7XG5cdFx0cmV0dXJuIEdBSUE7XG5cdH0sXG5cdGdldCAnVVJBTlVTJyAoKSB7XG5cdFx0cmV0dXJuIFVSQU5VUztcblx0fSxcblx0Z2V0ICdvZHAnICgpIHtcblx0XHRyZXR1cm4gKCBvOiBhbnksIHA6IFByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzOiBQcm9wZXJ0eURlc2NyaXB0b3IgJiBUaGlzVHlwZTxhbnk+ICk6IGFueSA9PiB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KCBvLCBwLCBhdHRyaWJ1dGVzICk7XG5cdFx0fTtcblx0fSxcblxuXHRnZXQgJ2RlZmF1bHRPcHRpb25zJyAoKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRPcHRpb25zO1xuXHR9LFxuXG5cdGdldCAnZGVmYXVsdE9wdGlvbnNLZXlzJyAoKSB7XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKCBkZWZhdWx0T3B0aW9ucyApO1xuXHR9LFxuXG5cdFRZUEVfVElUTEVfUFJFRklYLFxuXG5cdEVycm9yTWVzc2FnZXMsXG5cbn07XG4iXX0=